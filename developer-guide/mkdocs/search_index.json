{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the JW Platform Developer Guide\n\n\n\nThe JW Platform Developer guide provides guidance, recommendations and examples for how you can integrate programmatically with JW Platform.\n\n\nGetting Started - A Tale of Two APIs\n\n\nWhen choosing how to integrate with JW Platform is it important to select the right API for the right objectives.\n\n\nUse the Delivery API to build your sites and apps\n\n\nThe JW Platform \nDelivery API\n is designed for high scale, high availability, performant read only operations. This API uses a \nCDN and short caching\n to optimize response time globally. The content service packages your library into easily consumable templates including RSS and JSON feeds, single line player embeds and adaptive bitrate streaming manifests. You can require that requests for your content are signed with expiring tokenized links, but the same request can be made many times.\n\n\nUse the Management API to integrate with your CMS\n\n\nThe JW Platform \nManagement API\n is a read write API used to programmatically modify your library or connect to your CMS. This API \nrequires secure signing for each call\n and prevents replay of previous requests. The management API is optimized to be immediately consistent rather than capable of high volumes of requests. For this reason, the management API \nenforces a rate limit\n. When deciding which API to use, consider the volume of calls you will be making and whether or not the application strictly requires immediate consistency.\n\n\n\nHappy Streaming,\n\nJW Player", 
            "title": "Introduction"
        }, 
        {
            "location": "/#welcome-to-the-jw-platform-developer-guide", 
            "text": "The JW Platform Developer guide provides guidance, recommendations and examples for how you can integrate programmatically with JW Platform.", 
            "title": "Welcome to the JW Platform Developer Guide"
        }, 
        {
            "location": "/#getting-started-a-tale-of-two-apis", 
            "text": "When choosing how to integrate with JW Platform is it important to select the right API for the right objectives.", 
            "title": "Getting Started - A Tale of Two APIs"
        }, 
        {
            "location": "/#use-the-delivery-api-to-build-your-sites-and-apps", 
            "text": "The JW Platform  Delivery API  is designed for high scale, high availability, performant read only operations. This API uses a  CDN and short caching  to optimize response time globally. The content service packages your library into easily consumable templates including RSS and JSON feeds, single line player embeds and adaptive bitrate streaming manifests. You can require that requests for your content are signed with expiring tokenized links, but the same request can be made many times.", 
            "title": "Use the Delivery API to build your sites and apps"
        }, 
        {
            "location": "/#use-the-management-api-to-integrate-with-your-cms", 
            "text": "The JW Platform  Management API  is a read write API used to programmatically modify your library or connect to your CMS. This API  requires secure signing for each call  and prevents replay of previous requests. The management API is optimized to be immediately consistent rather than capable of high volumes of requests. For this reason, the management API  enforces a rate limit . When deciding which API to use, consider the volume of calls you will be making and whether or not the application strictly requires immediate consistency.", 
            "title": "Use the Management API to integrate with your CMS"
        }, 
        {
            "location": "/delivery-api/", 
            "text": "Using the JW Platform Delivery API for Embedding on Your Site\n\n\nThe JW Platform Delivery API at cdn.jwplayer.com offers endpoints from which you can request content and players configured in JW Platform. Embedding JW Platform hosted content and players in your sites and applications is achieved with the Delivery API through a standard URL scheme giving access to pre-packaged single line embeds, feeds, sources and other assets. These endpoints are the correct mechanism for making high volume calls from your webpage or application and are optimized for quick responses. Requests to the content service can be protected with URL token signing.\n\n\nWe are in the process of building out a second version of the Delivery API. The fundamental changes in the v2 endpoints are:\n\n\n\n\nInteractive \nAPI documentation\n flowing from an \nOpen API Initiative\n compliant API definition.\n\n\nConsistent naming across v2 Management and Delivery APIs aligned with terminology in the dashboard and support documentation.\n\n\nSignificantly more request time parameterization, v2 endpoints accept numerous query parameters allowing for future feature growth without complicating simple calls.\n\n\nURL token signing based on modern cryptography and the JSON Web Tokens (JWT) \nstandard\n.\n\n\n\n\nDelivery API v2 endpoints:\n\n\n\n\n/v2/media/\n provides a json object or rss feed describing a media item including metadata, sources, and associated assets like tracks.\n\n\n/v2/playlists/\n provides a json object or rss feed describing a playlist item including metadata and constituent media items with their metadata, sources, and associated assets like tracks.\n\n\n\n\nDelivery API v1 endpoints:\n\n\n\n\n/feeds/ \ndeprecated in favor of /v2/media/{media_id} and /v2/playlists/{playlist_id}\n\n\n/libraries/\n provides access to single line embeddable cloud-hosted players with no media. This will be migrated to \n/v2/players/{player_id}\n\n\n/players/\n provides access to single line embeddable cloud-hosted players with media included in the embed. \n/v2/media-players/{media_id}-{player_id}\n and \n/v2/playlist-players/{playlist_id}-{player_id}\n\n\n/videos/\n provides access to individual video transcodes hosted with JW Platform. This will be migrated to \n/v2/media/{media_id}/sources/{source}\n\n\n/manifests/\n provides access to adaptive bitrate streaming manifests for videos hosted with JW Platform. This will be migrated to \n/v2/media/{media_id}/sources/{source}\n\n\n/thumbs/\n provides access to video poster images. This will be migrated to \n/v2/media/{media_id}/images/{size}\n\n\n/tracks/\n provides access to video timed text track files. This will be migrated to \n/v2/media/{media_id}/tracks/{track_id}", 
            "title": "Overview"
        }, 
        {
            "location": "/delivery-api/#using-the-jw-platform-delivery-api-for-embedding-on-your-site", 
            "text": "The JW Platform Delivery API at cdn.jwplayer.com offers endpoints from which you can request content and players configured in JW Platform. Embedding JW Platform hosted content and players in your sites and applications is achieved with the Delivery API through a standard URL scheme giving access to pre-packaged single line embeds, feeds, sources and other assets. These endpoints are the correct mechanism for making high volume calls from your webpage or application and are optimized for quick responses. Requests to the content service can be protected with URL token signing.  We are in the process of building out a second version of the Delivery API. The fundamental changes in the v2 endpoints are:   Interactive  API documentation  flowing from an  Open API Initiative  compliant API definition.  Consistent naming across v2 Management and Delivery APIs aligned with terminology in the dashboard and support documentation.  Significantly more request time parameterization, v2 endpoints accept numerous query parameters allowing for future feature growth without complicating simple calls.  URL token signing based on modern cryptography and the JSON Web Tokens (JWT)  standard .", 
            "title": "Using the JW Platform Delivery API for Embedding on Your Site"
        }, 
        {
            "location": "/delivery-api/#delivery-api-v2-endpoints", 
            "text": "/v2/media/  provides a json object or rss feed describing a media item including metadata, sources, and associated assets like tracks.  /v2/playlists/  provides a json object or rss feed describing a playlist item including metadata and constituent media items with their metadata, sources, and associated assets like tracks.", 
            "title": "Delivery API v2 endpoints:"
        }, 
        {
            "location": "/delivery-api/#delivery-api-v1-endpoints", 
            "text": "/feeds/  deprecated in favor of /v2/media/{media_id} and /v2/playlists/{playlist_id}  /libraries/  provides access to single line embeddable cloud-hosted players with no media. This will be migrated to  /v2/players/{player_id}  /players/  provides access to single line embeddable cloud-hosted players with media included in the embed.  /v2/media-players/{media_id}-{player_id}  and  /v2/playlist-players/{playlist_id}-{player_id}  /videos/  provides access to individual video transcodes hosted with JW Platform. This will be migrated to  /v2/media/{media_id}/sources/{source}  /manifests/  provides access to adaptive bitrate streaming manifests for videos hosted with JW Platform. This will be migrated to  /v2/media/{media_id}/sources/{source}  /thumbs/  provides access to video poster images. This will be migrated to  /v2/media/{media_id}/images/{size}  /tracks/  provides access to video timed text track files. This will be migrated to  /v2/media/{media_id}/tracks/{track_id}", 
            "title": "Delivery API v1 endpoints:"
        }, 
        {
            "location": "/delivery-api/embedding-players/", 
            "text": "Embedding Players\n\n\nWhen building JW Platform into your own website or CMS, one of the most important functionalities is the generation of player embed codes for programmatic publishing.\n\n\nIntroduction\n\n\nLet's look at the typical player embed code:\n\n\nscript type=\"text/javascript\" src=\"//cdn.jwplayer.com/players/nPripu9l-ALJ3XQCI.js\"\n/script\n\n\n\n\nThe URL of the player itself is what's most interesting here; the wrapping JavaScript tag is always the same. It consists of five parts:\n\n\n\n\nThe Delivery API root. This is usually \ncdn.jwplayer.com\n, but it is another domain if you use \nDNS Masking\n.\n\n\nThe path to players, \n/players/\n. Note the URL scheme serves other stuff you can access too, like videos, thumbs and feeds.\n\n\nThe \nmedia ID\n of the video you want to embed, \nnPripu9l\n. This is an 8 character string that can be found in the videos overview and details pages in the dashboard. It can also be retrieved through the \nManagement API\n.\n\n\nThe \nPlayer ID\n of the player you want to embed the video with, \nALJ3XQCI\n. This is an 8 character string that can be found in the players overview and details pages in the dashboard. It too can be retrieved through the \nManagement API\n.\n\n\nThe extension of the player, \n.js\n. The player is also available as an HTML iframe with the extension of: \n.html\n.\n\n\n\n\nOnly the \nMedia ID\n and \nPlayer ID\n part of the embed code change depending on the video and player you embed. The other parts always remain the same. \n\n\nAs always, if you have questions or additional code you want to share, please \nsee our community questions\n.", 
            "title": "Embedding Players"
        }, 
        {
            "location": "/delivery-api/embedding-players/#embedding-players", 
            "text": "When building JW Platform into your own website or CMS, one of the most important functionalities is the generation of player embed codes for programmatic publishing.", 
            "title": "Embedding Players"
        }, 
        {
            "location": "/delivery-api/embedding-players/#introduction", 
            "text": "Let's look at the typical player embed code:  script type=\"text/javascript\" src=\"//cdn.jwplayer.com/players/nPripu9l-ALJ3XQCI.js\" /script   The URL of the player itself is what's most interesting here; the wrapping JavaScript tag is always the same. It consists of five parts:   The Delivery API root. This is usually  cdn.jwplayer.com , but it is another domain if you use  DNS Masking .  The path to players,  /players/ . Note the URL scheme serves other stuff you can access too, like videos, thumbs and feeds.  The  media ID  of the video you want to embed,  nPripu9l . This is an 8 character string that can be found in the videos overview and details pages in the dashboard. It can also be retrieved through the  Management API .  The  Player ID  of the player you want to embed the video with,  ALJ3XQCI . This is an 8 character string that can be found in the players overview and details pages in the dashboard. It too can be retrieved through the  Management API .  The extension of the player,  .js . The player is also available as an HTML iframe with the extension of:  .html .   Only the  Media ID  and  Player ID  part of the embed code change depending on the video and player you embed. The other parts always remain the same.   As always, if you have questions or additional code you want to share, please  see our community questions .", 
            "title": "Introduction"
        }, 
        {
            "location": "/delivery-api/sources/", 
            "text": "Using the sources parameter in the Delivery API\n\n\nBy default the Delivery API includes all our recommended sources in the order best suited for JW Player playback. In order to give publishers more control of source selection and ordering, v2 of the Delivery API allows customize which source(s) you would like to include when serving or syndicating video. This allows publishers to restrict streaming to adaptive formats only, or ensure that only a specific quality level in included when syndicating content via RSS.\n\n\nSpecifying Sources\n\n\nThe \n/v2/media/\n and \n/v2/playlists/\n endpoints accept a \nsources\n parameter. This parameter can be filled with a comma separated list of sources. The resulting JSON object or RSS feed will be populated with sources in the order specified in the sources parameter. Valid source specifications include:\n\n\n\n\nNamed source types:\n\n\ndash\n: To include a link to a platform hosted VP9-DASH adaptive streaming manifest. (This source is only created for Enterprise accounts with this feature enabled.)\n\n\nhls\n: Includes a link to an HLS adaptive streaming manifest.\n\n\nmp4\n: Includes links to all progressive h.264 .mp4 sources.\n\n\naac\n: Includes a link to an AAC encoded .m4a audio source\n\n\nmp3\n: Includes a link to an mp3 audio source (note that the property must be configured to generate .mp3 sources)\n\n\n\n\n\n\nHeight or width based mp4 source specification   \n\n!!!warning\n    Note that depending on the size and aspect ratio of the original video you upload, sources of particular heights and widths may not exist for all videos.\n!!!\n\n\nVideo height based sources can be specified using the height in pixels followed by a 'p' for example: \n1080p\n\n\nVideo width based sources can be specified by using the width in pixels followed by 'px' for example \n1920px\n\n\n\n\n\n\nTranscoding template id source specification.\n\n\nFor publishers needing continued access to legacy generated sources (e.g. flv, ogg, webm) a legacy 8 character template id can be used. These ids are property specific and can be found with an \n/v1/accounts/templates/list\n call to the Management API.\n\n\n\n\n\n\n\n\nFiltering Behavior and the \ndefault_source_fallback\n option\n\n\nWhen the \nsources\n parameter is used, the Delivery API uses strict filtering to ensure that only requested source(s) are returned. If no sources remain after filtering available sources for those specified in the \nsources\n parameter, the entire media item will be removed from the JSON object or RSS feed. If you would prefer to have all ready media items included even if the specified source(s) don't exist, you can use the \ndefault_source_fallback\n parameter with a value of \ntrue\n to instruct the Delivery API to include an available source (all hosted media assets in a \nready\n state have at least one progressive .mp4 source available for streaming).\n\n\nExamples\n\n\nA 2 item manual playlist without sources specified (includes all JW Player recommended sources ordered for best playback):\n\nhttps://cdn.jwplayer.com/v2/playlists/ZTs6tMfb\n\n\nThe same playlist with only the HLS source included:\n\nhttps://cdn.jwplayer.com/v2/playlists/ZTs6tMfb?sources=hls\n\n\nThe same playlist specifying 406p progressive mp4 video (note only one video is included because of strict source selection based on height):\n\nhttps://cdn.jwplayer.com/v2/playlists/ZTs6tMfb?sources=406p\n\n\nAgain specifying 406p but now allowing for default source fallback to ensure the inclusion of both videos:\n\nhttps://cdn.jwplayer.com/v2/playlists/ZTs6tMfb?sources=406p\ndefault_source_fallback=true", 
            "title": "Source Selection"
        }, 
        {
            "location": "/delivery-api/sources/#using-the-sources-parameter-in-the-delivery-api", 
            "text": "By default the Delivery API includes all our recommended sources in the order best suited for JW Player playback. In order to give publishers more control of source selection and ordering, v2 of the Delivery API allows customize which source(s) you would like to include when serving or syndicating video. This allows publishers to restrict streaming to adaptive formats only, or ensure that only a specific quality level in included when syndicating content via RSS.", 
            "title": "Using the sources parameter in the Delivery API"
        }, 
        {
            "location": "/delivery-api/sources/#specifying-sources", 
            "text": "The  /v2/media/  and  /v2/playlists/  endpoints accept a  sources  parameter. This parameter can be filled with a comma separated list of sources. The resulting JSON object or RSS feed will be populated with sources in the order specified in the sources parameter. Valid source specifications include:   Named source types:  dash : To include a link to a platform hosted VP9-DASH adaptive streaming manifest. (This source is only created for Enterprise accounts with this feature enabled.)  hls : Includes a link to an HLS adaptive streaming manifest.  mp4 : Includes links to all progressive h.264 .mp4 sources.  aac : Includes a link to an AAC encoded .m4a audio source  mp3 : Includes a link to an mp3 audio source (note that the property must be configured to generate .mp3 sources)    Height or width based mp4 source specification    \n!!!warning\n    Note that depending on the size and aspect ratio of the original video you upload, sources of particular heights and widths may not exist for all videos.\n!!!  Video height based sources can be specified using the height in pixels followed by a 'p' for example:  1080p  Video width based sources can be specified by using the width in pixels followed by 'px' for example  1920px    Transcoding template id source specification.  For publishers needing continued access to legacy generated sources (e.g. flv, ogg, webm) a legacy 8 character template id can be used. These ids are property specific and can be found with an  /v1/accounts/templates/list  call to the Management API.", 
            "title": "Specifying Sources"
        }, 
        {
            "location": "/delivery-api/sources/#filtering-behavior-and-the-default_source_fallback-option", 
            "text": "When the  sources  parameter is used, the Delivery API uses strict filtering to ensure that only requested source(s) are returned. If no sources remain after filtering available sources for those specified in the  sources  parameter, the entire media item will be removed from the JSON object or RSS feed. If you would prefer to have all ready media items included even if the specified source(s) don't exist, you can use the  default_source_fallback  parameter with a value of  true  to instruct the Delivery API to include an available source (all hosted media assets in a  ready  state have at least one progressive .mp4 source available for streaming).", 
            "title": "Filtering Behavior and the default_source_fallback option"
        }, 
        {
            "location": "/delivery-api/sources/#examples", 
            "text": "A 2 item manual playlist without sources specified (includes all JW Player recommended sources ordered for best playback): https://cdn.jwplayer.com/v2/playlists/ZTs6tMfb  The same playlist with only the HLS source included: https://cdn.jwplayer.com/v2/playlists/ZTs6tMfb?sources=hls  The same playlist specifying 406p progressive mp4 video (note only one video is included because of strict source selection based on height): https://cdn.jwplayer.com/v2/playlists/ZTs6tMfb?sources=406p  Again specifying 406p but now allowing for default source fallback to ensure the inclusion of both videos: https://cdn.jwplayer.com/v2/playlists/ZTs6tMfb?sources=406p default_source_fallback=true", 
            "title": "Examples"
        }, 
        {
            "location": "/delivery-api/url-token-signing/", 
            "text": "Protecting your content with URL Token Signing\n\n\nDelivery API includes a security feature that allows you to restrict public access to videos or to videos plus players. This feature is enabled in the dashboard. When enabled, content can only be requested by constructing so-called signed links. These links will expire after a short time, preventing unauthorized sharing or leeching of your content.\n\n\nEnabling Signing Enforcement\n\n\nYou can require URL token signing for assets related to your account through the Management API \n/accounts/update\n call using the \nallow_downloads\n and \nallow_embeds\n parameters or via the dashboard as documented in the \nsupport article\n.\n\n\n!!!warning\nPlease make sure you start to use signing on your site before changing this security setting! Unsigned videos and/or players will \ndrop dead\n the instant you change this setting.\n!!!\n\n\nJWT Tokenized Links\n\n\n!!!note\nDelivery API v1 endpoints use a legacy url signing mechanism described \nhere\n\n!!!\n\n\nDelivery API /v2/ endpoints take advantage of standardized token signing using JSON Web Tokens (JWTs). You can learn more about the specific construction, formatting and security of these tokens via \nRFC 7519\n. Discussion, tools and links to open source libraries are available at \njwt.io\n\n\nJWTs consist of three sections:\n\n\n\n\nA \nheader\n specifying the cryptographic algorithm and token type.\n\n\nA \npayload\n containing \nclaims\n in JSON format\n\n\nA \nsignature\n that can be used to verify the token\n\n\n\n\nJWT Header for JW Platform Requests\n\n\nAt this time, JW Platform only supports a single algorithm and token type thus all headers should be based on:\n\n\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n\n\n\nJWT Payload for Delivery API Requests\n\n\nThe payload consists of claims that specify a \nresource\n being requested, an expiration time (\nexp\n), and any parameters the endpoint accepts (in this example we also include \nrelated_media_id\n).\n\n\n{\n  \"resource\": \"/v2/playlists/Xw0oaD4q\",\n  \"exp\": 1893456000,\n  \"related_media_id\": \"RltV8MtT\"\n}\n\n\n\nRequired Claims:\n All JW Platform JWTs MUST include the following claims.\n\n\nresource\n\n\n\n\nThe resource that is being requested. (e.g. /v2/playlists/Xw0oaD4q) this ensures that generated tokens cannot be applied to unintended resources.\n\n\n\n\nexp\n\n\n\n\nThe expiration date of the token, as a UNIX timestamp (e.g. \n1893456000\n). Typically, generated URLs should be valid between a minute and a few hours.\n\n\nThe shorter you make the expiration dates, the more you lock down your content. If a link has expired, even download tools will not be able to grab the content. However, overly quick expirations can result in bad user experience dues to small discrepancies in server time or delays in clients requesting resources at the expiring links.\n\n\nIf you have a high-volume website, the extra signature generation step might be a performance issue. In that case, you could cache signed URLs with an interval of e.g. 5 minutes. Signed requests do not have to be unique.\n\n\n\n\nAdditional Claims:\n JWTs can optionally contain additional claims to specify additional query parameters that are applicable to that resource, the example above includes \nrelated_media_id\n because the resource is a Similar Playlist. Specific query parameters available for each resource can be found in the \nDelivery API v2 reference\n.\n\n\nJWT Signature for JW Platform Requests\n\n\nThe signature portion is generated using an HMAC 256 hash of the preceding sections and the API Secret of the property for the content you are requesting. The specific details can be found in \nRFC 7519\n but we recommend using a well supported \nopen source library\n in the language of your choice.\n\n\n!!!warning\nBecause URL tokens use the property's API secret, it is inappropriate to generate them client-side as you would be exposing your secret to end users.\n!!!\n\n\nConstructing URLs with tokens\n\n\nTo construct a URL with the JWT you created, simply include it as a single query parameter named \ntoken\n for the resource you are requesting.\nFor example, https://cdn.jwplayer.com/v2/playlists/Xw0oaD4q?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZXNvdXJjZSI6Ii92Mi9wbGF5bGlzdHMvWHcwb2FENHEiLCJleHAiOjE4OTM0NTYwMDAsInJlbGF0ZWRfbWVkaWFfaWQiOiJSbHRWOE10VCJ9.Y5N7qUUXUUCmh-M8HHkc4Akveu294S69wSe2l1QMBl4 corresponds to the parameters described above.\n\n\nIf you would like to get started playing with JWTs manually, jwt.io offers nice debugging tool. \nThis link\n will get you started with the token above; you will need to change the payload and secret to reflect content and the secret of your property.\n\n\nExamples\n\n\nPHP\n\n\nThis script uses \nfirebase/php-jwt\n (other libraries are available at \njwt.io\n)\n\n\n?php\nrequire_once('JWT.php'); // Available from https://github.com/firebase/php-jwt/blob/master/src/JWT.php  \nuse \\Firebase\\JWT\\JWT;\n\n$playlist_id = \nmyListID\n; // Replace with your playlist ID\n$token_secret = \nmyAPIsecret\n; // Replace this value with the API secret for the property\n\n$resource = \n/v2/playlists/\n.$playlist_id;\n$exp = ceil((time() + 3600)/180) * 180; // Link is valid for 1hr but normalized to 3 minutes to promote better caching\n$token_body = array(\n    \nresource\n =\n $resource,\n    // Other request parameters can be added here if desired.\n    \nexp\n =\n $exp\n);\n\n$jwt = JWT::encode($token_body, $token_secret);\n\nprint \na href=\\\nhttps://cdn.jwplayer.com/$resource?token=$jwt\\\nThis is a signed link.\n/a\n;\n\n\n\n\n\nPython\n\n\nThis example uses PyJWT \npip install pyjwt\n (other libraries are available at \njwt.io\n)\n\n\nimport jwt\nimport math\nimport time\n\nplaylist_id = \nmyListID\n # Replace with your playlist ID\ntoken_secret = \nmyAPIsecret\n # Replace this value with the API secret for the property\n\nresource = \n/v2/playlists/\n + playlist_id\nexp = math.ceil((time.time() + 3600)/180) * 180 # Link is valid for 1hr but normalized to 3 minutes to promote better caching\ntoken_body = {\n    \nresource\n: resource,\n    # Other request parameters can be added here if desired.\n    \nexp\n: exp\n}\n\nencoded = jwt.encode(token_body, token_secret, algorithm='HS256')\n\nprint(encoded)\n\n\n\n\n\nError handling\n\n\nWhen unsigned content is requested while signing is enabled, the Delivery API will return a \n403 Forbidden\n HTTP Status.\n\n\nWhen incorrectly or expired signed content is requested, the content service will also return a \n403 Forbidden\n HTTP Status. Signed URLs can be incorrect due to a wrong signature or due to an already expired timestamp.\n\n\nNote that incorrectly signed URLs will always return a 403. Correctly signed, unexpired URLs will always work. Use this to test your signing mechanism and start using it across your site before enabling the security enforcement in the dashboard.", 
            "title": "URL Token Signing"
        }, 
        {
            "location": "/delivery-api/url-token-signing/#protecting-your-content-with-url-token-signing", 
            "text": "Delivery API includes a security feature that allows you to restrict public access to videos or to videos plus players. This feature is enabled in the dashboard. When enabled, content can only be requested by constructing so-called signed links. These links will expire after a short time, preventing unauthorized sharing or leeching of your content.", 
            "title": "Protecting your content with URL Token Signing"
        }, 
        {
            "location": "/delivery-api/url-token-signing/#enabling-signing-enforcement", 
            "text": "You can require URL token signing for assets related to your account through the Management API  /accounts/update  call using the  allow_downloads  and  allow_embeds  parameters or via the dashboard as documented in the  support article .  !!!warning\nPlease make sure you start to use signing on your site before changing this security setting! Unsigned videos and/or players will  drop dead  the instant you change this setting.\n!!!", 
            "title": "Enabling Signing Enforcement"
        }, 
        {
            "location": "/delivery-api/url-token-signing/#jwt-tokenized-links", 
            "text": "!!!note\nDelivery API v1 endpoints use a legacy url signing mechanism described  here \n!!!  Delivery API /v2/ endpoints take advantage of standardized token signing using JSON Web Tokens (JWTs). You can learn more about the specific construction, formatting and security of these tokens via  RFC 7519 . Discussion, tools and links to open source libraries are available at  jwt.io  JWTs consist of three sections:   A  header  specifying the cryptographic algorithm and token type.  A  payload  containing  claims  in JSON format  A  signature  that can be used to verify the token", 
            "title": "JWT Tokenized Links"
        }, 
        {
            "location": "/delivery-api/url-token-signing/#jwt-header-for-jw-platform-requests", 
            "text": "At this time, JW Platform only supports a single algorithm and token type thus all headers should be based on:  {\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}", 
            "title": "JWT Header for JW Platform Requests"
        }, 
        {
            "location": "/delivery-api/url-token-signing/#jwt-payload-for-delivery-api-requests", 
            "text": "The payload consists of claims that specify a  resource  being requested, an expiration time ( exp ), and any parameters the endpoint accepts (in this example we also include  related_media_id ).  {\n  \"resource\": \"/v2/playlists/Xw0oaD4q\",\n  \"exp\": 1893456000,\n  \"related_media_id\": \"RltV8MtT\"\n}  Required Claims:  All JW Platform JWTs MUST include the following claims.  resource   The resource that is being requested. (e.g. /v2/playlists/Xw0oaD4q) this ensures that generated tokens cannot be applied to unintended resources.   exp   The expiration date of the token, as a UNIX timestamp (e.g.  1893456000 ). Typically, generated URLs should be valid between a minute and a few hours.  The shorter you make the expiration dates, the more you lock down your content. If a link has expired, even download tools will not be able to grab the content. However, overly quick expirations can result in bad user experience dues to small discrepancies in server time or delays in clients requesting resources at the expiring links.  If you have a high-volume website, the extra signature generation step might be a performance issue. In that case, you could cache signed URLs with an interval of e.g. 5 minutes. Signed requests do not have to be unique.   Additional Claims:  JWTs can optionally contain additional claims to specify additional query parameters that are applicable to that resource, the example above includes  related_media_id  because the resource is a Similar Playlist. Specific query parameters available for each resource can be found in the  Delivery API v2 reference .", 
            "title": "JWT Payload for Delivery API Requests"
        }, 
        {
            "location": "/delivery-api/url-token-signing/#jwt-signature-for-jw-platform-requests", 
            "text": "The signature portion is generated using an HMAC 256 hash of the preceding sections and the API Secret of the property for the content you are requesting. The specific details can be found in  RFC 7519  but we recommend using a well supported  open source library  in the language of your choice.  !!!warning\nBecause URL tokens use the property's API secret, it is inappropriate to generate them client-side as you would be exposing your secret to end users.\n!!!", 
            "title": "JWT Signature for JW Platform Requests"
        }, 
        {
            "location": "/delivery-api/url-token-signing/#constructing-urls-with-tokens", 
            "text": "To construct a URL with the JWT you created, simply include it as a single query parameter named  token  for the resource you are requesting.\nFor example, https://cdn.jwplayer.com/v2/playlists/Xw0oaD4q?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZXNvdXJjZSI6Ii92Mi9wbGF5bGlzdHMvWHcwb2FENHEiLCJleHAiOjE4OTM0NTYwMDAsInJlbGF0ZWRfbWVkaWFfaWQiOiJSbHRWOE10VCJ9.Y5N7qUUXUUCmh-M8HHkc4Akveu294S69wSe2l1QMBl4 corresponds to the parameters described above.  If you would like to get started playing with JWTs manually, jwt.io offers nice debugging tool.  This link  will get you started with the token above; you will need to change the payload and secret to reflect content and the secret of your property.", 
            "title": "Constructing URLs with tokens"
        }, 
        {
            "location": "/delivery-api/url-token-signing/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/delivery-api/url-token-signing/#php", 
            "text": "This script uses  firebase/php-jwt  (other libraries are available at  jwt.io )  ?php\nrequire_once('JWT.php'); // Available from https://github.com/firebase/php-jwt/blob/master/src/JWT.php  \nuse \\Firebase\\JWT\\JWT;\n\n$playlist_id =  myListID ; // Replace with your playlist ID\n$token_secret =  myAPIsecret ; // Replace this value with the API secret for the property\n\n$resource =  /v2/playlists/ .$playlist_id;\n$exp = ceil((time() + 3600)/180) * 180; // Link is valid for 1hr but normalized to 3 minutes to promote better caching\n$token_body = array(\n     resource  =  $resource,\n    // Other request parameters can be added here if desired.\n     exp  =  $exp\n);\n\n$jwt = JWT::encode($token_body, $token_secret);\n\nprint  a href=\\ https://cdn.jwplayer.com/$resource?token=$jwt\\ This is a signed link. /a ;", 
            "title": "PHP"
        }, 
        {
            "location": "/delivery-api/url-token-signing/#python", 
            "text": "This example uses PyJWT  pip install pyjwt  (other libraries are available at  jwt.io )  import jwt\nimport math\nimport time\n\nplaylist_id =  myListID  # Replace with your playlist ID\ntoken_secret =  myAPIsecret  # Replace this value with the API secret for the property\n\nresource =  /v2/playlists/  + playlist_id\nexp = math.ceil((time.time() + 3600)/180) * 180 # Link is valid for 1hr but normalized to 3 minutes to promote better caching\ntoken_body = {\n     resource : resource,\n    # Other request parameters can be added here if desired.\n     exp : exp\n}\n\nencoded = jwt.encode(token_body, token_secret, algorithm='HS256')\n\nprint(encoded)", 
            "title": "Python"
        }, 
        {
            "location": "/delivery-api/url-token-signing/#error-handling", 
            "text": "When unsigned content is requested while signing is enabled, the Delivery API will return a  403 Forbidden  HTTP Status.  When incorrectly or expired signed content is requested, the content service will also return a  403 Forbidden  HTTP Status. Signed URLs can be incorrect due to a wrong signature or due to an already expired timestamp.  Note that incorrectly signed URLs will always return a 403. Correctly signed, unexpired URLs will always work. Use this to test your signing mechanism and start using it across your site before enabling the security enforcement in the dashboard.", 
            "title": "Error handling"
        }, 
        {
            "location": "/delivery-api/legacy-url-token-signing/", 
            "text": "Legacy URL Token Signing for v1 Delivery API Endpoints\n\n\nThe legacy (v1) Delivery API endpoints include a similar a security feature to \nv2 URL token signing\n that allows you to restrict public access to videos or to videos plus players. This feature is enabled in the dashboard. When enabled, content can only be requested by constructing so-called signed links. These links will expire after a short time, preventing unauthorized sharing or leeching of your content.\n\n\nEnabling Signing Enforcement\n\n\nYou can require URL token signing for assets related to your account through the Management API \n/accounts/update\n call using the \nallow_downloads\n and \nallow_embeds\n parameters or via the dashboard as documented in the \nsupport article\n.\n\n\n!!!warning\nPlease make sure you start to use signing on your site before changing this security setting! Unsigned videos and/or players will \ndrop dead\n the instant you change this setting.\n!!!\n\n\nSigned Links\n\n\n!!!note\nDelivery API v2 endpoints use a different signing mechanism described \nhere\n\n!!!\n\n\nA video or player URL can be signed by appending two querystring parameters to the regular URL. Here's two examples and a description of the parameters:\n\n\n\n\nhttp://cdn.jwplayer.com/videos/nPripu9l.mp4?exp=1371335018\nsig=a0124258c73177029d09bb82c6608392\n\n\nhttp://cdn.jwplayer.com/players/nPripu9l-ALJ3XQCI.js?exp=1371335035\nsig=f42664403879f61ece4f444d225ce507\n\n\n\n\nThe \nexp\n Parameter\n\n\nexp\n is the expiration date of the URL, as a UNIX timestamp (e.g. \n1271338236\n). Typically, generated URLs should be valid between a minute and a few hours.\n\n\nThe \nsig\n Parameter\n\n\nsig\n is a signature that is used to authorize the request. This signature is an MD5 digest of the  path, the expiration date and the account secret:\n\n\nmd5(CONTENT_PATH:EXPIRATION_STAMP:ACCOUNT_SECRET)\n\n\n\nHere's a small explanation of the three signature parameters:\n\n\nCONTENT_PATH\n - This is only the path portion of the URL (e.g. \nvideos/nPripu9l.mp4\n). No domain and no leading slash.\n\n\nEXPIRATION_STAMP\n - This is the expiration date again (e.g. \n1271338236\n).\n\n\nACCOUNT_SECRET\n - This is the shared secret of your JW Platform account (e.g. \nKsi93hsy38sjKfha9JaheEMp\n). It can be found in the \naccount\n tab of the dashboard.\n\n\nUsing signing\n\n\nIf you want to deny all public access to your videos or players, all you have to do is enable the security setting. There'll be no way for a third party to generate signed links, since they do not know your account secret. Your content will remain available for previewing / downloading within the dashboard.\n\n\nIf you want to secure your content, but still want to embed players or offer video downloads on your own site (e.g. if you have a pay-per-view site), then you should implement a small script on your site that automatically generates the signed links. For example, you could use a small PHP function like this one to always generate a valid signed URL:\n\n\n?php\nfunction get_signed_player($videokey,$playerkey) {\n  $path = \nplayers/\n.$videokey.\n-\n.$playerkey.\n.js\n;\n  $expires = round((time()+3600)/300)*300;\n  $secret = \nKsi93hsy38sjKfha9JaheEMp\n;\n  $signature = md5($path.':'.$expires.':'.$secret);\n  $url = 'http://cdn.jwplayer.com/'.$path.'?exp='.$expires.'\nsig='.$signature;\n  return $url;\n};\n\necho \np\nWatch this cool video:\n/p\n;\necho \nscript type='text/javascript' src='\n.get_signed_player('nPripu9l','ALJ3XQCI').\n'\n/script\n;\n?\n\n\n\n\n\nA couple of things to keep in mind when auto-generating signed links:\n\n\n!!!warning\nSigned links should always be generated serverside. Otherwise your shared secret will be exposed to the client. If you do want to use signed links in javascript or actionscript applications, setup a small serverside script to act as a proxy.\n!!!\n\n\n\n\nThe shorter you make the expiration dates, the more you lock down your content. If a link has expired, even download tools like Realplayer will not be able to grab the content. However, at a certain point you will run into expiration issues with slow-responding servers or small discrepancies in server time.\n\n\nIf you have a high-volume website, the extra signature generation step might be a performance issue. In that case, you could cache signed URLs with an interval of e.g. 5 minutes. Signed requests do not have to be unique.\n\n\n\n\nError handling\n\n\nWhen unsigned content is requested while signing is enabled, the Delivery API will return a \n403 Access forbidden\n HTTP header.\n\n\nWhen incorrectly signed content is requested, the Delivery API will also return a \n403 Access forbidden\n HTTP header. Signed URLs can be incorrect due to a wrong signature or due to an already expired timestamp.\n\n\nNote that incorrectly signed URLs will always get a 403 returned and correctly signed URLs will always work. Use this to test and put in place your signing mechanism before actually enabling the security in the dashboard.", 
            "title": "Legacy Token Signing"
        }, 
        {
            "location": "/delivery-api/legacy-url-token-signing/#legacy-url-token-signing-for-v1-delivery-api-endpoints", 
            "text": "The legacy (v1) Delivery API endpoints include a similar a security feature to  v2 URL token signing  that allows you to restrict public access to videos or to videos plus players. This feature is enabled in the dashboard. When enabled, content can only be requested by constructing so-called signed links. These links will expire after a short time, preventing unauthorized sharing or leeching of your content.", 
            "title": "Legacy URL Token Signing for v1 Delivery API Endpoints"
        }, 
        {
            "location": "/delivery-api/legacy-url-token-signing/#enabling-signing-enforcement", 
            "text": "You can require URL token signing for assets related to your account through the Management API  /accounts/update  call using the  allow_downloads  and  allow_embeds  parameters or via the dashboard as documented in the  support article .  !!!warning\nPlease make sure you start to use signing on your site before changing this security setting! Unsigned videos and/or players will  drop dead  the instant you change this setting.\n!!!", 
            "title": "Enabling Signing Enforcement"
        }, 
        {
            "location": "/delivery-api/legacy-url-token-signing/#signed-links", 
            "text": "!!!note\nDelivery API v2 endpoints use a different signing mechanism described  here \n!!!  A video or player URL can be signed by appending two querystring parameters to the regular URL. Here's two examples and a description of the parameters:   http://cdn.jwplayer.com/videos/nPripu9l.mp4?exp=1371335018 sig=a0124258c73177029d09bb82c6608392  http://cdn.jwplayer.com/players/nPripu9l-ALJ3XQCI.js?exp=1371335035 sig=f42664403879f61ece4f444d225ce507", 
            "title": "Signed Links"
        }, 
        {
            "location": "/delivery-api/legacy-url-token-signing/#the-exp-parameter", 
            "text": "exp  is the expiration date of the URL, as a UNIX timestamp (e.g.  1271338236 ). Typically, generated URLs should be valid between a minute and a few hours.", 
            "title": "The exp Parameter"
        }, 
        {
            "location": "/delivery-api/legacy-url-token-signing/#the-sig-parameter", 
            "text": "sig  is a signature that is used to authorize the request. This signature is an MD5 digest of the  path, the expiration date and the account secret:  md5(CONTENT_PATH:EXPIRATION_STAMP:ACCOUNT_SECRET)  Here's a small explanation of the three signature parameters:  CONTENT_PATH  - This is only the path portion of the URL (e.g.  videos/nPripu9l.mp4 ). No domain and no leading slash.  EXPIRATION_STAMP  - This is the expiration date again (e.g.  1271338236 ).  ACCOUNT_SECRET  - This is the shared secret of your JW Platform account (e.g.  Ksi93hsy38sjKfha9JaheEMp ). It can be found in the  account  tab of the dashboard.", 
            "title": "The sig Parameter"
        }, 
        {
            "location": "/delivery-api/legacy-url-token-signing/#using-signing", 
            "text": "If you want to deny all public access to your videos or players, all you have to do is enable the security setting. There'll be no way for a third party to generate signed links, since they do not know your account secret. Your content will remain available for previewing / downloading within the dashboard.  If you want to secure your content, but still want to embed players or offer video downloads on your own site (e.g. if you have a pay-per-view site), then you should implement a small script on your site that automatically generates the signed links. For example, you could use a small PHP function like this one to always generate a valid signed URL:  ?php\nfunction get_signed_player($videokey,$playerkey) {\n  $path =  players/ .$videokey. - .$playerkey. .js ;\n  $expires = round((time()+3600)/300)*300;\n  $secret =  Ksi93hsy38sjKfha9JaheEMp ;\n  $signature = md5($path.':'.$expires.':'.$secret);\n  $url = 'http://cdn.jwplayer.com/'.$path.'?exp='.$expires.' sig='.$signature;\n  return $url;\n};\n\necho  p Watch this cool video: /p ;\necho  script type='text/javascript' src=' .get_signed_player('nPripu9l','ALJ3XQCI'). ' /script ;\n?   A couple of things to keep in mind when auto-generating signed links:  !!!warning\nSigned links should always be generated serverside. Otherwise your shared secret will be exposed to the client. If you do want to use signed links in javascript or actionscript applications, setup a small serverside script to act as a proxy.\n!!!   The shorter you make the expiration dates, the more you lock down your content. If a link has expired, even download tools like Realplayer will not be able to grab the content. However, at a certain point you will run into expiration issues with slow-responding servers or small discrepancies in server time.  If you have a high-volume website, the extra signature generation step might be a performance issue. In that case, you could cache signed URLs with an interval of e.g. 5 minutes. Signed requests do not have to be unique.", 
            "title": "Using signing"
        }, 
        {
            "location": "/delivery-api/legacy-url-token-signing/#error-handling", 
            "text": "When unsigned content is requested while signing is enabled, the Delivery API will return a  403 Access forbidden  HTTP header.  When incorrectly signed content is requested, the Delivery API will also return a  403 Access forbidden  HTTP header. Signed URLs can be incorrect due to a wrong signature or due to an already expired timestamp.  Note that incorrectly signed URLs will always get a 403 returned and correctly signed URLs will always work. Use this to test and put in place your signing mechanism before actually enabling the security in the dashboard.", 
            "title": "Error handling"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/", 
            "text": "Recommended Feeds Widgets\n\n\nData-Driven Recommendations from JW Platform leverage audience behavior and content traits to drive deeper audience engagement and increase content monetization. \n\n\nResearch shows that well positioned page widgets that viewers can see and interact with while watching video are likely to drive even more viewer engagement than in-player recommendations alone. To promote out-of-player viewer engagement, we have designed several page widgets which consume and display data-driven feeds served from JW Platform. The code examples below can be implemented directly and skinned with our \nCSS Reference\n or serve as a starting part for more advanced implementations. \n\n\nFor more information about building and managing data-driven feeds please see our \nPlatform API Reference\n and \ncustomer support article\n.\n\n\n\n\nGetting Started\n\n\n!!!important\nRecommended feeds must be entitled on your account. Please \ncontact our team\n to add data-drivien recommendations to your JW Player account.\n!!!\n\n\nYou can \nview the feeds widget demos\n on our developer site and \nfork the source code\n from Github. Each widget comes with a README providing instructions to run it locally.\n\n\nJavaScript Widget\n\n\nThe Basics\n\n\nThe JavaScript widget uses jQuery, UnderscoreJS, and Handlebars. In order to modify the widget for your site, you will configure \nindex.html\n and (optionally) \ntemplates/item.hbs\n. \n\n\nThe feed classes follow the JW Player skinning model. See our \nCSS Reference\n for more information on modifying \ncss/style.css\n and skinning your widget. \n\n\nView the JavaScript Feeds Widget Demo.\n\n\nSetup your Player\n\n\nThe \nindex.html\n file dynamically populates the content for \ndiv id=\"player\"\n and \ndiv id=\"feed\"\n.\n\n\nReplace the content library URL at the top of the page with one of your own to setup the player:\n\n\nscript src=\n//cdn.jwplayer.com/libraries/DbXZPMBQ.js\n/script\n\n\n\n\n\nYou can find your content library URL using the \"Manage\" tab under \"Players\" in the Dashboard and clicking into any player or creating a new player. Our widget player is set up as responsive, 16:9 ratio, autostart, and mute on start.\n\n\n\n\nPopulate your Feed\n\n\nLook for the following setup function at the bottom of the page:\n\n\nscript\n\n  var playerDiv = \nplayer\n, feedDiv = \nfeed\n, feedTitleDiv = \nfeedtitle\n, media_id = \nuNXCVIsW\n, feed_id = \nXw0oaD4q\n;\n  jsWidget.setup(playerDiv, feedDiv, feedTitleDiv, media_id, feed_id);\n\n/script\n\n\n\n\n\nReplace the last two variables in \nvar playerDiv\n with a \nmedia_id\n and \nfeed_id\n from your content library. This specifies the content being pulled in to the widget.\n\n\nYou can find your \nfeed_id\n using the \"Feeds\" tab under \"Lists\" in the Dashboard. When you select a feed title from the list, you can view the \nfeed_id\n and URL.\n\n\n\n\n!!!\nThe widget is set to injest JSON by default, but both JSON and RSS feeds are supported. The \njs/feeds_harness.js\n file contains commented code to implement an RSS parser.\n!!!\n\n\nSee the \nPlatform API Reference\n for more information on using the \nfeed.rss\n endpoint programmatically.\n\n\nRender your Feed\n\n\nThe \ntemplates/item.hbs\n file is the template object for each piece of content in your feed. It includes \nid\n, \nimage\n, \ntitle\n, \ndesc\n, and \ndur\n. You can use this file to determine which metadata displays in the feed.\n\n\nBy default, the widget does not display video description in the feed, but you can uncomment \np class=\"jw-media-description\"\n{{desc}}\n/p\n to show it. Try commenting/uncommenting different lines to hide/show their corresponding metadata in your feed.\n\n\n  \nli id={{id}} class=\njw-option\n\n    \ndiv class=\njw-thumbnail-container\n\n      \nimg class=\njw-thumbnail\n src=\n{{image}}\n\n    \n/div\n\n    \ndiv class=\njw-metadata-container\n\n      \nh3 class=\njw-media-title\n{{title}}\n/h3\n\n      \n!--\np class=\njw-media-description\n{{desc}}\n/p\n --\n\n      \ntime class=\njw-media-duration\n{{dur}}\n/time\n\n    \n/div\n\n  \n/li\n\n\n\n\n\nRun Customized Feed Widget\n\n\nFollow the \nREADME\n to run your widget locally.\n\n\nAngular JS Widget\n\n\nThe Basics\n\n\nIn order to modify the Angular JS widget for your site, you will configure \nlanding.js\n and (optionally) \nfeed.html\n.\n\n\nThe feed classes follow the JW Player skinning model. See our \nCSS Reference\n for more information on modifying \ncss/app.css\n and skinning your widget. \n\n\nView the Angular JS Feeds Widget Demo.\n\n\nSetup your Player\n\n\nThe \nindex.html\n file runs all of the scripts for the page. Replace the content library URL with one of your own:\n\n\nscript src=\n//cdn.jwplayer.com/libraries/DbXZPMBQ.js\n/script\n\n\n\n\n\nYou can find your content library URL using the \"Manage\" tab under \"Players\" in the Dashboard and clicking in to any player or creating a new player. Our widget player is set up as responsive, 16:9 ratio, autostart, and mute on start.\n\n\n\n\nPopulate your Feed\n\n\nThe\nlanding/landing.js\n file initializes the configuration of the Angular app, including feed and player setup. Look for the runonce function at the bottom of the page:\n\n\n$scope.runonce = function () {\n  $rootScope.feed_id = \nXw0oaD4q\n;\n  $rootScope.media_id = \nRltV8MtT\n;\n  };\n\n\n\n\nReplace the two variables in \n$scope.runonce\n with a \nfeed_id\n and \nmedia_id\n from your content library. This specifies the content being pulled into the widget.\n\n\nYou can find your \nfeed_id\n using the \"Feeds\" tab under \"Lists\" in the Dashboard. When you select a feed title from the list, you can view the \nfeed_id\n and URL.\n\n\n\n\n!!!\nThe widget is set to injest JSON by default, but both JSON and RSS feeds are supported. You can customize \nfeed.js\n to implement an RSS parser.\n!!!\n\n\nRender your Feed\n\n\nThe \nfeed/feed.html\n file is the template object for each piece of content in your feed. It includes \nimage\n, \ntitle\n, \ndescription\n, and \nduration\n. You can use this file to determine which metadata displays in the feed.\n\n\nBy default, the widget does not display video description in the feed, but you can uncomment \np class=\"jw-media-description\"\n{{item.description}}\n/p\n to show it. Try commenting/uncommenting different lines to hide/show their corresponding metadata in your feed.\n\n\n  \ndiv class=\nrow jw-option\n ng-repeat=\nitem in feed\n ng-click=\nloadVideo(item)\n\n      \ndiv class=\njw-thumbnail-container\n\n        \nimg src=\n{{item.image}}\n class=\njw-thumbnail\n/\n\n      \n/div\n\n\n    \ndiv class=\njw-metadata-container\n\n      \nh3 class=\njw-media-title\n{{item.title}}\n/h3\n\n      \n!--\np class=\njw-media-description\n{{item.description}}\n/p\n--\n\n      \np class=\njw-media-duration\n{{toHms(item.sources[0].duration)}}\n/p\n\n    \n/div\n\n\n\n\n\nRun Customized Feed Widget\n\n\nThe \napp.js\n file builds the page from all of the partials. Follow the Developer Demo \nREADME\n to run your widget locally.", 
            "title": "Feeds Widgets"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#recommended-feeds-widgets", 
            "text": "Data-Driven Recommendations from JW Platform leverage audience behavior and content traits to drive deeper audience engagement and increase content monetization.   Research shows that well positioned page widgets that viewers can see and interact with while watching video are likely to drive even more viewer engagement than in-player recommendations alone. To promote out-of-player viewer engagement, we have designed several page widgets which consume and display data-driven feeds served from JW Platform. The code examples below can be implemented directly and skinned with our  CSS Reference  or serve as a starting part for more advanced implementations.   For more information about building and managing data-driven feeds please see our  Platform API Reference  and  customer support article .", 
            "title": "Recommended Feeds Widgets"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#getting-started", 
            "text": "!!!important\nRecommended feeds must be entitled on your account. Please  contact our team  to add data-drivien recommendations to your JW Player account.\n!!!  You can  view the feeds widget demos  on our developer site and  fork the source code  from Github. Each widget comes with a README providing instructions to run it locally.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#javascript-widget", 
            "text": "", 
            "title": "JavaScript Widget"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#the-basics", 
            "text": "The JavaScript widget uses jQuery, UnderscoreJS, and Handlebars. In order to modify the widget for your site, you will configure  index.html  and (optionally)  templates/item.hbs .   The feed classes follow the JW Player skinning model. See our  CSS Reference  for more information on modifying  css/style.css  and skinning your widget.   View the JavaScript Feeds Widget Demo.", 
            "title": "The Basics"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#setup-your-player", 
            "text": "The  index.html  file dynamically populates the content for  div id=\"player\"  and  div id=\"feed\" .  Replace the content library URL at the top of the page with one of your own to setup the player:  script src= //cdn.jwplayer.com/libraries/DbXZPMBQ.js /script   You can find your content library URL using the \"Manage\" tab under \"Players\" in the Dashboard and clicking into any player or creating a new player. Our widget player is set up as responsive, 16:9 ratio, autostart, and mute on start.", 
            "title": "Setup your Player"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#populate-your-feed", 
            "text": "Look for the following setup function at the bottom of the page:  script \n  var playerDiv =  player , feedDiv =  feed , feedTitleDiv =  feedtitle , media_id =  uNXCVIsW , feed_id =  Xw0oaD4q ;\n  jsWidget.setup(playerDiv, feedDiv, feedTitleDiv, media_id, feed_id); /script   Replace the last two variables in  var playerDiv  with a  media_id  and  feed_id  from your content library. This specifies the content being pulled in to the widget.  You can find your  feed_id  using the \"Feeds\" tab under \"Lists\" in the Dashboard. When you select a feed title from the list, you can view the  feed_id  and URL.   !!!\nThe widget is set to injest JSON by default, but both JSON and RSS feeds are supported. The  js/feeds_harness.js  file contains commented code to implement an RSS parser.\n!!!  See the  Platform API Reference  for more information on using the  feed.rss  endpoint programmatically.", 
            "title": "Populate your Feed"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#render-your-feed", 
            "text": "The  templates/item.hbs  file is the template object for each piece of content in your feed. It includes  id ,  image ,  title ,  desc , and  dur . You can use this file to determine which metadata displays in the feed.  By default, the widget does not display video description in the feed, but you can uncomment  p class=\"jw-media-description\" {{desc}} /p  to show it. Try commenting/uncommenting different lines to hide/show their corresponding metadata in your feed.     li id={{id}} class= jw-option \n     div class= jw-thumbnail-container \n       img class= jw-thumbnail  src= {{image}} \n     /div \n     div class= jw-metadata-container \n       h3 class= jw-media-title {{title}} /h3 \n       !-- p class= jw-media-description {{desc}} /p  -- \n       time class= jw-media-duration {{dur}} /time \n     /div \n   /li", 
            "title": "Render your Feed"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#run-customized-feed-widget", 
            "text": "Follow the  README  to run your widget locally.", 
            "title": "Run Customized Feed Widget"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#angular-js-widget", 
            "text": "", 
            "title": "Angular JS Widget"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#the-basics_1", 
            "text": "In order to modify the Angular JS widget for your site, you will configure  landing.js  and (optionally)  feed.html .  The feed classes follow the JW Player skinning model. See our  CSS Reference  for more information on modifying  css/app.css  and skinning your widget.   View the Angular JS Feeds Widget Demo.", 
            "title": "The Basics"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#setup-your-player_1", 
            "text": "The  index.html  file runs all of the scripts for the page. Replace the content library URL with one of your own:  script src= //cdn.jwplayer.com/libraries/DbXZPMBQ.js /script   You can find your content library URL using the \"Manage\" tab under \"Players\" in the Dashboard and clicking in to any player or creating a new player. Our widget player is set up as responsive, 16:9 ratio, autostart, and mute on start.", 
            "title": "Setup your Player"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#populate-your-feed_1", 
            "text": "The landing/landing.js  file initializes the configuration of the Angular app, including feed and player setup. Look for the runonce function at the bottom of the page:  $scope.runonce = function () {\n  $rootScope.feed_id =  Xw0oaD4q ;\n  $rootScope.media_id =  RltV8MtT ;\n  };  Replace the two variables in  $scope.runonce  with a  feed_id  and  media_id  from your content library. This specifies the content being pulled into the widget.  You can find your  feed_id  using the \"Feeds\" tab under \"Lists\" in the Dashboard. When you select a feed title from the list, you can view the  feed_id  and URL.   !!!\nThe widget is set to injest JSON by default, but both JSON and RSS feeds are supported. You can customize  feed.js  to implement an RSS parser.\n!!!", 
            "title": "Populate your Feed"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#render-your-feed_1", 
            "text": "The  feed/feed.html  file is the template object for each piece of content in your feed. It includes  image ,  title ,  description , and  duration . You can use this file to determine which metadata displays in the feed.  By default, the widget does not display video description in the feed, but you can uncomment  p class=\"jw-media-description\" {{item.description}} /p  to show it. Try commenting/uncommenting different lines to hide/show their corresponding metadata in your feed.     div class= row jw-option  ng-repeat= item in feed  ng-click= loadVideo(item) \n       div class= jw-thumbnail-container \n         img src= {{item.image}}  class= jw-thumbnail / \n       /div \n\n     div class= jw-metadata-container \n       h3 class= jw-media-title {{item.title}} /h3 \n       !-- p class= jw-media-description {{item.description}} /p -- \n       p class= jw-media-duration {{toHms(item.sources[0].duration)}} /p \n     /div", 
            "title": "Render your Feed"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widgets/#run-customized-feed-widget_1", 
            "text": "The  app.js  file builds the page from all of the partials. Follow the Developer Demo  README  to run your widget locally.", 
            "title": "Run Customized Feed Widget"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widget-css-reference/", 
            "text": "Feeds Widget CSS Reference\n\n\nOverview\n\n\nThis skinning reference can be used to customize the feeds widget with your brand. The feeds widget follows the \nsame skinning model as the Player\n. Each version of the widget uses a basic CSS file but can be applicable to LESS or SASS.\n\n\nSkinning Guide\n\n\n\n\n\n\n\n\ncss class\n\n\ndefinition\n\n\n\n\n\n\n\n\n\n\n.jw-feed-container\n\n\nSets the background color of the feed\n\n\n\n\n\n\n.jw-feed\n\n\nThis is used to position the feed\n\n\n\n\n\n\n.jw-feed-title\n\n\nSets the style of the title of the feed\n\n\n\n\n\n\n.jw-option\n\n\nContains the metadata for each feed item\n\n\n\n\n\n\n.jw-thumbnail-container\n\n\nSets the size of the preview thumbnail\n\n\n\n\n\n\n.jw-thumbnail\n\n\nThumbnail preview for feed item\n\n\n\n\n\n\n.jw-media-title\n\n\nSets the style of the media title\n\n\n\n\n\n\n.jw-media-description\n\n\nSets the style of the media description\n\n\n\n\n\n\n.jw-media-duration\n\n\nSets the style of the media duration\n\n\n\n\n\n\n.jw-feed-error\n\n\nSets the style of the error message", 
            "title": "Feeds Widget CSS Reference"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widget-css-reference/#feeds-widget-css-reference", 
            "text": "", 
            "title": "Feeds Widget CSS Reference"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widget-css-reference/#overview", 
            "text": "This skinning reference can be used to customize the feeds widget with your brand. The feeds widget follows the  same skinning model as the Player . Each version of the widget uses a basic CSS file but can be applicable to LESS or SASS.", 
            "title": "Overview"
        }, 
        {
            "location": "/delivery-api/widgets/playlist-widget-css-reference/#skinning-guide", 
            "text": "css class  definition      .jw-feed-container  Sets the background color of the feed    .jw-feed  This is used to position the feed    .jw-feed-title  Sets the style of the title of the feed    .jw-option  Contains the metadata for each feed item    .jw-thumbnail-container  Sets the size of the preview thumbnail    .jw-thumbnail  Thumbnail preview for feed item    .jw-media-title  Sets the style of the media title    .jw-media-description  Sets the style of the media description    .jw-media-duration  Sets the style of the media duration    .jw-feed-error  Sets the style of the error message", 
            "title": "Skinning Guide"
        }, 
        {
            "location": "/management-api/", 
            "text": "Managing Your Library with the JW Platform Management API\n\n\nThe JW Platform Management API at api.jwplatform.com provides a set of classes for managing all aspects of your library. The JW Platform Management API features a straightforward authentication mechanism and multiple output formats (PHP, JSON, XML, Python). This reference describes in detail how our API works and which classes and assets are available. \n\n\n!!!warning\nTo ensure fair access for all, usage of the JW Platform Management API (api.jwplatform.com) is limited to \n60 calls per minute\n. Calls that exceed this rate will result in a 429 Rate Limit Exceeded error and will not be executed. If you need a higher API rate, please \ncontact us\n to get your account upgraded. Note that calls to the Delivery API (cdn.jwplayer.com) do not count towards the API rate limit.\n!!!\n\n\nJW Player Provided API Kits and Tools\n\n\n\n\nPython:\n \nPython API Client and Examples\n\n\nPHP:\n \nPHP API Kit\n, \nPHP API Examples\n\n\nWordPress:\n We provide a fully functional JW Platform \nWordPress Plugin\n, which is capable of uploading, searching and publishing videos within the WordPress admin.\n\n\n\n\nCommunity Maintained Tools\n\n\nIf you maintain a JW Platform integration tool, please email devrelations@jwplayer.com to let us know!\n\n\n\n\nCommand Line:\n The \nClack Command Line Interface\n is an easy way to make one off API calls on the JW Platform API.\n\n\nRuby:\n The \njwplayer-api-client Ruby gem\n integrates with the platform API and can perform URL Token signing on the content service. (\nsource code\n)\n\n\n\n\nManagement API Class Structure\n\n\n\n\n/videos/\n The video classes define methods for uploading, editing and listing videos, thumbnails and tags.\n\n\n\n\nManagement API v1 Syntax and Upload Formats\n\n\nDetailed documentation of the v1 syntax and upload formats can be found in the \nAPI reference\n.\n\n\n\n\nCall Syntax\n\n\nAuthentication\n\n\nOutput Formats\n\n\nError Handling\n\n\nGeneral Upload Guidance and Examples\n\n\nS3 Upload Specifics\n\n\nSingle Part Uploads", 
            "title": "Overview"
        }, 
        {
            "location": "/management-api/#managing-your-library-with-the-jw-platform-management-api", 
            "text": "The JW Platform Management API at api.jwplatform.com provides a set of classes for managing all aspects of your library. The JW Platform Management API features a straightforward authentication mechanism and multiple output formats (PHP, JSON, XML, Python). This reference describes in detail how our API works and which classes and assets are available.   !!!warning\nTo ensure fair access for all, usage of the JW Platform Management API (api.jwplatform.com) is limited to  60 calls per minute . Calls that exceed this rate will result in a 429 Rate Limit Exceeded error and will not be executed. If you need a higher API rate, please  contact us  to get your account upgraded. Note that calls to the Delivery API (cdn.jwplayer.com) do not count towards the API rate limit.\n!!!", 
            "title": "Managing Your Library with the JW Platform Management API"
        }, 
        {
            "location": "/management-api/#jw-player-provided-api-kits-and-tools", 
            "text": "Python:   Python API Client and Examples  PHP:   PHP API Kit ,  PHP API Examples  WordPress:  We provide a fully functional JW Platform  WordPress Plugin , which is capable of uploading, searching and publishing videos within the WordPress admin.", 
            "title": "JW Player Provided API Kits and Tools"
        }, 
        {
            "location": "/management-api/#community-maintained-tools", 
            "text": "If you maintain a JW Platform integration tool, please email devrelations@jwplayer.com to let us know!   Command Line:  The  Clack Command Line Interface  is an easy way to make one off API calls on the JW Platform API.  Ruby:  The  jwplayer-api-client Ruby gem  integrates with the platform API and can perform URL Token signing on the content service. ( source code )", 
            "title": "Community Maintained Tools"
        }, 
        {
            "location": "/management-api/#management-api-class-structure", 
            "text": "/videos/  The video classes define methods for uploading, editing and listing videos, thumbnails and tags.", 
            "title": "Management API Class Structure"
        }, 
        {
            "location": "/management-api/#management-api-v1-syntax-and-upload-formats", 
            "text": "Detailed documentation of the v1 syntax and upload formats can be found in the  API reference .   Call Syntax  Authentication  Output Formats  Error Handling  General Upload Guidance and Examples  S3 Upload Specifics  Single Part Uploads", 
            "title": "Management API v1 Syntax and Upload Formats"
        }, 
        {
            "location": "/management-api/uploading-videos/", 
            "text": "Uploading Videos\n\n\nUploading videos to the platform via the API can be achieved in a number of ways. \nWe recommend the following preference order for achieving uploads:\n\n\n\n\nFetch Uploads:\n If your video is accessible via http(s) on the web. Give us a link and we'll go fetch it.\n\n\nCDN Accelerated Uploads:\n For files up to 5GB in size\n\n\nRegular Style Uploads:\n \n For files greater than 5GB (up to the system limit of 25GB)\n\n\nFTP:\n We recommend against the use of FTP\n\n\n\n\nFetch Uploads\n\n\nIf your video is accessible via http(s) on the web. Give us a link and we'll go fetch it. By having our servers talk to your servers, both ends live in well provisioned data centers with good networks so ingest is very fast and reliable. \nSteps:\n\n1. Create a video specifying a \ndownload_url\n from which we will fetch the source video. \nClack\n example:\n\n\nclack call /videos/create \n{'title':'My New Fetch Upload', 'download_url':'https://mysite.net/videos/myVideo.mp4'}\n\n\n\n\n\nCDN Accelerated Uploads\n\n\nFor files up to 5GB in size, we have set up cloud infrastructure to allow you to upload directly to the nearest Amazon edge connection. In practice, we have seen these edge accelerated uploads go up to five times faster than non-accelerated uploads. These uploads use a simple HTTPS PUT to a signed link. \n\n\nSteps:\n A demonstration script for uploading with the Python SDK is available \nhere\n.\n\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport logging\nimport sys\n\nimport jwplatform\nimport requests\n\nlogging.basicConfig(level=logging.INFO)\n\n\ndef create_video(api_key, api_secret, local_video_path, **kwargs):\n    \n\n    Function which creates new video object via s3 upload method.\n    :param api_key: \nstring\n JWPlatform api-key\n    :param api_secret: \nstring\n JWPlatform shared-secret\n    :param local_video_path: \nstring\n Path to media on local machine.\n    :param kwargs: Arguments conforming to standards found @ https://developer.jwplayer.com/    jw-platform /refer  methvideos/create.html\n    :return:\n    \n\n    filename = os.path.basename(local_video_path)\n\n    # Setup API client\n    jwplatform_client = jwplatform.Client(api_key, api_secret)\n\n    # Make /videos/create API call\n    logging.info(\ncreating video\n)\n    try:\n        response = jwplatform_client.videos.create(upload_method='s3', **kwargs)\n    except jwplatform.errors.JWPlatformError as e:\n        logging.error(\nEncountered an error creating a video\\n{}\n.format(e))\n        sys.exit(e.message)\n    logging.info(response)\n\n    # Construct base url for upload\n    upload_url = '{}://{}{}'.format(\n        response['link']['protocol'],\n        response['link']['address'],\n        response['link']['path']\n    )\n\n    # Query parameters for the upload\n    query_parameters = response['link']['query']\n\n    # HTTP PUT upload using requests\n    headers = {'Content-Disposition': 'attachment; filename=\n{}\n'.format(filename)}\n    with open(local_video_path, 'rb') as f:\n        r = requests.put(upload_url, params=query_parameters, headers=headers, data=f)\n        logging.info('uploading file {} to url {}'.format(local_video_path, r.url))\n        logging.info('upload response: {}'.format(r.text))\n        logging.info(r)\n\n\n\n\nAlternatively, via clack and curl:\n\n\n\n\n\n\nCreate a video with the \nupload_method: s3\n to get an upload link. \nClack\n example:\n\n\nclack call /videos/create \"{'title':'My s3 Accelerated Upload','upload_method':'s3'}\"\n\n\n\n\n\n\nUse curl or another tool to make an HTTP PUT to the link returned:\n\n\ncurl --request PUT --upload-file /file_path/file_name.mp4 \"https://jwplatform-upload.s3-accelerate.amazonaws.com/tL17msiU?AWSAccessKeyId=AKIAIRXCJ3TPZA4HVNYZ\nExpires=1482770374\nSignature=1%2Fl%2BL6%2FyOE05dNEbXHW8sw7TGF4%3D\"\n\n\n\n\n\n\nRegular Style Uploads\n\n\nFor files greater than 5GB (up to the system limit of 25GB) the regular and resumable style uploads can be used. \nSteps:\n\n\n\n\n\n\nCreate a video without specifying an upload_method or specifying resumable. \nClack\n example:\n\n\nclack call /videos/create \"{'title':'My 7GB Upload'}\"\n\n\n\n\n\n\nUse curl or another tool to submit the file as a form to the link returned:\n\n\ncurl --form file=@./video.mpeg \"http://upload.jwplatform.com/v1/videos/upload?api_format=xml\nkey=vtQmcboj\n  token=e2bbad0fd889d5d2e30047596cfe3789778257d2\"\n\n\n\n\n\n\nFTP\n\n\nWe recommend against the use of FTP but if you have an enterprise account and existing workflows require ftp, \ncontact us\n to get it enabled on your account.", 
            "title": "Uploading Videos"
        }, 
        {
            "location": "/management-api/uploading-videos/#uploading-videos", 
            "text": "Uploading videos to the platform via the API can be achieved in a number of ways.  We recommend the following preference order for achieving uploads:   Fetch Uploads:  If your video is accessible via http(s) on the web. Give us a link and we'll go fetch it.  CDN Accelerated Uploads:  For files up to 5GB in size  Regular Style Uploads:    For files greater than 5GB (up to the system limit of 25GB)  FTP:  We recommend against the use of FTP", 
            "title": "Uploading Videos"
        }, 
        {
            "location": "/management-api/uploading-videos/#fetch-uploads", 
            "text": "If your video is accessible via http(s) on the web. Give us a link and we'll go fetch it. By having our servers talk to your servers, both ends live in well provisioned data centers with good networks so ingest is very fast and reliable.  Steps: \n1. Create a video specifying a  download_url  from which we will fetch the source video.  Clack  example:  clack call /videos/create  {'title':'My New Fetch Upload', 'download_url':'https://mysite.net/videos/myVideo.mp4'}", 
            "title": "Fetch Uploads"
        }, 
        {
            "location": "/management-api/uploading-videos/#cdn-accelerated-uploads", 
            "text": "For files up to 5GB in size, we have set up cloud infrastructure to allow you to upload directly to the nearest Amazon edge connection. In practice, we have seen these edge accelerated uploads go up to five times faster than non-accelerated uploads. These uploads use a simple HTTPS PUT to a signed link.   Steps:  A demonstration script for uploading with the Python SDK is available  here .  #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport logging\nimport sys\n\nimport jwplatform\nimport requests\n\nlogging.basicConfig(level=logging.INFO)\n\n\ndef create_video(api_key, api_secret, local_video_path, **kwargs):\n     \n    Function which creates new video object via s3 upload method.\n    :param api_key:  string  JWPlatform api-key\n    :param api_secret:  string  JWPlatform shared-secret\n    :param local_video_path:  string  Path to media on local machine.\n    :param kwargs: Arguments conforming to standards found @ https://developer.jwplayer.com/    jw-platform /refer  methvideos/create.html\n    :return:\n     \n    filename = os.path.basename(local_video_path)\n\n    # Setup API client\n    jwplatform_client = jwplatform.Client(api_key, api_secret)\n\n    # Make /videos/create API call\n    logging.info( creating video )\n    try:\n        response = jwplatform_client.videos.create(upload_method='s3', **kwargs)\n    except jwplatform.errors.JWPlatformError as e:\n        logging.error( Encountered an error creating a video\\n{} .format(e))\n        sys.exit(e.message)\n    logging.info(response)\n\n    # Construct base url for upload\n    upload_url = '{}://{}{}'.format(\n        response['link']['protocol'],\n        response['link']['address'],\n        response['link']['path']\n    )\n\n    # Query parameters for the upload\n    query_parameters = response['link']['query']\n\n    # HTTP PUT upload using requests\n    headers = {'Content-Disposition': 'attachment; filename= {} '.format(filename)}\n    with open(local_video_path, 'rb') as f:\n        r = requests.put(upload_url, params=query_parameters, headers=headers, data=f)\n        logging.info('uploading file {} to url {}'.format(local_video_path, r.url))\n        logging.info('upload response: {}'.format(r.text))\n        logging.info(r)  Alternatively, via clack and curl:    Create a video with the  upload_method: s3  to get an upload link.  Clack  example:  clack call /videos/create \"{'title':'My s3 Accelerated Upload','upload_method':'s3'}\"    Use curl or another tool to make an HTTP PUT to the link returned:  curl --request PUT --upload-file /file_path/file_name.mp4 \"https://jwplatform-upload.s3-accelerate.amazonaws.com/tL17msiU?AWSAccessKeyId=AKIAIRXCJ3TPZA4HVNYZ Expires=1482770374 Signature=1%2Fl%2BL6%2FyOE05dNEbXHW8sw7TGF4%3D\"", 
            "title": "CDN Accelerated Uploads"
        }, 
        {
            "location": "/management-api/uploading-videos/#regular-style-uploads", 
            "text": "For files greater than 5GB (up to the system limit of 25GB) the regular and resumable style uploads can be used.  Steps:    Create a video without specifying an upload_method or specifying resumable.  Clack  example:  clack call /videos/create \"{'title':'My 7GB Upload'}\"    Use curl or another tool to submit the file as a form to the link returned:  curl --form file=@./video.mpeg \"http://upload.jwplatform.com/v1/videos/upload?api_format=xml key=vtQmcboj   token=e2bbad0fd889d5d2e30047596cfe3789778257d2\"", 
            "title": "Regular Style Uploads"
        }, 
        {
            "location": "/management-api/uploading-videos/#ftp", 
            "text": "We recommend against the use of FTP but if you have an enterprise account and existing workflows require ftp,  contact us  to get it enabled on your account.", 
            "title": "FTP"
        }, 
        {
            "location": "/management-api/batch-migration/", 
            "text": "Batch Migrations\n\n\nThough it is possible to do individual video uploads to your platform account, it is also possible to perform batch video uploading programmatically using the JW Platform API. In order to perform this process, a record of relevant data will need to be created as a CSV(comma-separated value) file. Data in the file will then be processed, resulting in the upload of video files. In addition to a video file, it is also possible to associate title, description, organizational tags, and even custom data. This creates a new video object in JW Platform for each row of data in the csv file. This process is implemented by leveraging the \nJW API SDK\n, which is available in both PHP and Python.\n\n\nPreparing a CSV Ingest Sheet\n\n\nYour csv should have columns A-F in the header. For the sake of organization,\u00a0\ndownload_url\n, \ntitle\n, \ndescription\n, \ntags\n, \ndate\n, and \nlink\n are highly recommended to be present in your csv.\u00a0We will still be able to ingest your files\u00a0if your video records have an empty value for some of the fields, so it is worth utilizing these whenever possible.\nAn example of a properly formatted CSV can be downloaded \nhere\n.\n\n\nRequired Value\n\n\n\n\ndownload_url -\n EVERY video record MUST have a download_url. This refers to the remote URL of your video file.\n\n\n\n\nNote that our platform will only ingest files served over http. Both RTMP and HLS (m3u8) sources will not work. We recommend that your videos adhere to the guidelines \nhere\n to ensure our platform can transcode them.\n\n\nOptional Values\n\n\nThe following values are optional, but can be imported into our platform. While these are not required, they can help greatly with content organization.\n\n\n\n\ntitle\n\n\ndescription\n\n\ntags\n\n\ndate\n (UTC, unix timestamp)\n\n\nlink\n\n\ncustom fields\n\u00a0(These fields don\u2019t need to have a value set and can be empty)\n\n\n\n\nCustom Fields\n\n\nCustom fields can be useful for saving additional metadata to your video object records. In this example, both the id and the thumbnail url from the legacy system are saved to the video object. A custom field is always formed as follows: custom.[myfieldname]\n\n\nNote on HTML Encoding\n\n\nSpecial characters should not be HTML encoded. A number of publishers and services use HTML encoded characters within their video metadata. HTML encoded characters in the \ntitle\n, \ndescription\n, and \ntags\n fields should be decoded before pushing to the API.\n\n\nProcessing Your CSV Sheet Programmatically\n\n\nAs mentioned earlier, the csv is simply a cohesive method for preparing your legacy videos to be \u2018ingested\u2019 by the JW Platform. The real work is done programmatically through our API. Learn more about the API \nhere\n. The only endpoint you will be using for uploading is the \u2018\n/videos/create\n\u2019 call.\n\n\nBasic Workflow\n\n\nThe process of batch importing work along the following timeline:\n\n\n\n\nYour code imports the appropriate SDK (optional)\n\n\nYour code opens the ingest CSV and parses it into an array or list\n\n\nYour code parses the header column and assumes the remaining rows are each video\n\n\nYour code loops over each video row and calls the \u2018/videos/create\u2019 endpoint, creating a video record for each\n\n\nYour code outputs the video_key created by the JWPlatform (optional, but useful)\n\n\n\n\nExpected Output and Example Code\n\n\nWhen successfully running a batch upload, the expected result would be as follows:\n\n\n$ php batch.php\nSintel Trailer upload success. key = ad9vs7d\nBig Buck Bunny Trailer upload success. key = ad9vs7d\nElephants Dtream Trailer upload success. key = ad9vs7d\n\n\n\nTo perform your own batch import, please see our code sample \nhere\n. This zip\u00a0includes both PHP and Python batch upload sample code.", 
            "title": "Batch Migrations"
        }, 
        {
            "location": "/management-api/batch-migration/#batch-migrations", 
            "text": "Though it is possible to do individual video uploads to your platform account, it is also possible to perform batch video uploading programmatically using the JW Platform API. In order to perform this process, a record of relevant data will need to be created as a CSV(comma-separated value) file. Data in the file will then be processed, resulting in the upload of video files. In addition to a video file, it is also possible to associate title, description, organizational tags, and even custom data. This creates a new video object in JW Platform for each row of data in the csv file. This process is implemented by leveraging the  JW API SDK , which is available in both PHP and Python.", 
            "title": "Batch Migrations"
        }, 
        {
            "location": "/management-api/batch-migration/#preparing-a-csv-ingest-sheet", 
            "text": "Your csv should have columns A-F in the header. For the sake of organization,\u00a0 download_url ,  title ,  description ,  tags ,  date , and  link  are highly recommended to be present in your csv.\u00a0We will still be able to ingest your files\u00a0if your video records have an empty value for some of the fields, so it is worth utilizing these whenever possible.\nAn example of a properly formatted CSV can be downloaded  here .", 
            "title": "Preparing a CSV Ingest Sheet"
        }, 
        {
            "location": "/management-api/batch-migration/#required-value", 
            "text": "download_url -  EVERY video record MUST have a download_url. This refers to the remote URL of your video file.   Note that our platform will only ingest files served over http. Both RTMP and HLS (m3u8) sources will not work. We recommend that your videos adhere to the guidelines  here  to ensure our platform can transcode them.", 
            "title": "Required Value"
        }, 
        {
            "location": "/management-api/batch-migration/#optional-values", 
            "text": "The following values are optional, but can be imported into our platform. While these are not required, they can help greatly with content organization.   title  description  tags  date  (UTC, unix timestamp)  link  custom fields \u00a0(These fields don\u2019t need to have a value set and can be empty)", 
            "title": "Optional Values"
        }, 
        {
            "location": "/management-api/batch-migration/#custom-fields", 
            "text": "Custom fields can be useful for saving additional metadata to your video object records. In this example, both the id and the thumbnail url from the legacy system are saved to the video object. A custom field is always formed as follows: custom.[myfieldname]", 
            "title": "Custom Fields"
        }, 
        {
            "location": "/management-api/batch-migration/#note-on-html-encoding", 
            "text": "Special characters should not be HTML encoded. A number of publishers and services use HTML encoded characters within their video metadata. HTML encoded characters in the  title ,  description , and  tags  fields should be decoded before pushing to the API.", 
            "title": "Note on HTML Encoding"
        }, 
        {
            "location": "/management-api/batch-migration/#processing-your-csv-sheet-programmatically", 
            "text": "As mentioned earlier, the csv is simply a cohesive method for preparing your legacy videos to be \u2018ingested\u2019 by the JW Platform. The real work is done programmatically through our API. Learn more about the API  here . The only endpoint you will be using for uploading is the \u2018 /videos/create \u2019 call.", 
            "title": "Processing Your CSV Sheet Programmatically"
        }, 
        {
            "location": "/management-api/batch-migration/#basic-workflow", 
            "text": "The process of batch importing work along the following timeline:   Your code imports the appropriate SDK (optional)  Your code opens the ingest CSV and parses it into an array or list  Your code parses the header column and assumes the remaining rows are each video  Your code loops over each video row and calls the \u2018/videos/create\u2019 endpoint, creating a video record for each  Your code outputs the video_key created by the JWPlatform (optional, but useful)", 
            "title": "Basic Workflow"
        }, 
        {
            "location": "/management-api/batch-migration/#expected-output-and-example-code", 
            "text": "When successfully running a batch upload, the expected result would be as follows:  $ php batch.php\nSintel Trailer upload success. key = ad9vs7d\nBig Buck Bunny Trailer upload success. key = ad9vs7d\nElephants Dtream Trailer upload success. key = ad9vs7d  To perform your own batch import, please see our code sample  here . This zip\u00a0includes both PHP and Python batch upload sample code.", 
            "title": "Expected Output and Example Code"
        }, 
        {
            "location": "/management-api/analytics/", 
            "text": "Analytics\n\n\nThe JW Player Analytics endpoint allows you to access your Video and Advertising data programmatically.  This way, JW Player users are able to pull JW Player data into their own application, data warehouse, or analytics tools.  If you're looking for reports and visualizations to analyze your data, you can use the JW Player Dashboard.\n\n\nGetting Started\n\n\nSkip to API Examples\n\n\nObtaining your Site API Key \n Secret\n\n\nEach request to the Analytics API is for a specific JW Player site (or property) within your account.  To query data for one of your JW Player sites, you will need to obtain your site API key.\n\n\nYou can find each property\u2019s API Key in the JW Player Dashboard by navigating to Account \n API Credentials and clicking \"Show Credentials\" for the relevant site.\n\n\nTo find your secret, you'll find JW Reporting API Credentials at the bottom of the api credentials page.  You may need to first create a Private API key here if you have not already.\n\n\n!!!warning\nThe property api secret will not work for this endpoint - you must use the secret specific to the Reporting API\n!!!\n\n\nAPI Rules\n\n\nThe following rules apply to all JW Player users.  Users with access to our Enterprise platform have additional functionality described \nhere\n.\n\n\n\n\nData Start Date\n - 2017-01-01\n\n\nData Timeliness\n - Updated  every ~30 minutes during peak traffic\n\n\nRate Limiting\n - 60 requests/minute per API Token or IP\n\n\nMax number of dimensions\n - 1\n\n\nMax number of metrics\n - 5\n\n\nMax page length\n - 100 rows per page maximum\n\n\nMax # of filters\n - 1 filter (for 1 dimension)\n\n\nAll dates are Eastern\n\n\n\n\nMetrics, Dimensions, and Filters\n\n\nMetrics\n\n\nA metric is a quantitative measurement.  Visit our \nsupport doc\n to learn more about how each metric is defined.  The following metrics are currently supported for all JW Player customers:\n\n\n\n\n\n\n\n\nMetric Name\n\n\nmetric_id\n\n\nUnits\n\n\n\n\n\n\n\n\n\n\nEmbeds\n\n\nembeds\n\n\ninteger\n\n\n\n\n\n\nPlays\n\n\nplays\n\n\ninteger\n\n\n\n\n\n\nCompletes\n\n\ncompletes\n\n\ninteger\n\n\n\n\n\n\nTime Watched\n\n\ntime_watched\n\n\ninteger\n\n\n\n\n\n\nAd Impressions\n\n\nad_impressions\n\n\ninteger\n\n\n\n\n\n\n25% Completes\n\n\n25_percent_completes\n\n\ninteger\n\n\n\n\n\n\n50% Completes\n\n\n50_percent_completes\n\n\ninteger\n\n\n\n\n\n\n75% Completes\n\n\n75_percent_completees\n\n\ninteger\n\n\n\n\n\n\n\n\nDimensions\n\n\nA dimension is an attribute of your metric(s).  For example, each Play event has several attributes that help describe it.  We determine what Country it took place in, what Video it was for, what device was used, etc.  Selecting a dimension will tell us how the metrics grouped in your response.  The following dimensions are currently supported for all JW Player customers:\n\n\n\n\n\n\n\n\nDimension\n\n\ndimension_id\n\n\nFormat\n\n\n\n\n\n\n\n\n\n\nEastern Date\n\n\neastern_date\n\n\n'yyyy-mm-dd'\n\n\n\n\n\n\nMedia\n\n\nmedia_id\n\n\nmedia_id\n\n\n\n\n\n\nDevice\n\n\ndevice_id\n\n\ncustom - string\n\n\n\n\n\n\nCountry\n\n\ncountry_code\n\n\nISO 3166-1\n\n\n\n\n\n\nPlaylist\n\n\nplaylist_id\n\n\nplaylist_id\n\n\n\n\n\n\nPlatform\n\n\nplatform_id\n\n\ncustom - string\n\n\n\n\n\n\nPlayer\n\n\nplayer_id\n\n\nplayer_id\n\n\n\n\n\n\nAd Schedule\n\n\nad_schedule_id\n\n\nad_schedule_id\n\n\n\n\n\n\nPage Domain\n\n\npage_domain\n\n\nN/A\n\n\n\n\n\n\n\n\nFilters (optional)\n\n\nA filter is a query element that you can apply to focus on a specific segment of your data.  You can choose to pass a dimension, and operator (equals, does not equal), and a value.\n\n\nEnterprise Functionality\n\n\n!!!important\nThe following advanced metrics and dimensions are available only to enterprise JW Player customers with Advanced Analytics.\n\nFor each request, the date range must be within the last 90 days.\nIf you'd like to speak with a JW Player representative about upgrading your account, please \nContact Us\n\n!!!\n\n\nIn addition to the functionality described in the rest of this doc, Enterprise customers are also able to:\n\n\n\n\nGroup by 2 dimensions\n\n\nApply up to 10 filters\n\n\nUse the following dimensions and metrics\n\n\n\n\n\n\n\n\n\n\nDimension\n\n\ndimension_id\n\n\nFormat\n\n\n\n\n\n\n\n\n\n\nRegion\n\n\nregion\n\n\ncustom - string\n\n\n\n\n\n\nCity\n\n\ncity\n\n\ncustom - string\n\n\n\n\n\n\nPage URL\n\n\npage_url\n\n\nN/A\n\n\n\n\n\n\nMedia Tags\n\n\ntag\n\n\nN/A\n\n\n\n\n\n\nVideo Duration\n\n\nvideo_duration\n\n\ncustom - string\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMetric Name\n\n\nmetric_id\n\n\nUnit\n\n\n\n\n\n\n\n\n\n\nAd Clicks\n\n\nad_clicks\n\n\ninteger\n\n\n\n\n\n\nAd Skips\n\n\nad_skips\n\n\ninteger\n\n\n\n\n\n\nAd Completes\n\n\nad_completes\n\n\ninteger\n\n\n\n\n\n\nUnique Viewers\n\n\nunique_viewers\n\n\ninteger\n\n\n\n\n\n\nAd Impressions per Viewer\n\n\nads_per_viewer\n\n\ntotal / viewer\n\n\n\n\n\n\nPlays per Viewer\n\n\nplays_per_viewer\n\n\ntotal / viewer\n\n\n\n\n\n\nTime watched per viewer\n\n\ntime_watched_per_viewer\n\n\nseconds / viewer\n\n\n\n\n\n\nComplete Rate\n\n\ncomplete_rate\n\n\npercent\n\n\n\n\n\n\n\n\nEnterprise customers also have the option to enrich their response with additional metadata (instead of just obtaining JW Platform IDs).  This is available for the dimensions listed below, and can be enabled by adding \n\"include_metadata\": \"1\"\n to the request.\n\n\n\n\n\n\n\n\ndimension_id\n\n\nMetadata\n\n\nMetadata description\n\n\nResponse block\n\n\n\n\n\n\n\n\n\n\nmedia_id\n\n\ntitle, tag\n\n\nmedia title and tags\n\n\nincludes\n\n\n\n\n\n\ndevice_id\n\n\nname\n\n\ndevice ids to names\n\n\nmeta\n\n\n\n\n\n\ncountry_code\n\n\nname\n\n\ncountry codes(ISO 3166-1) to names\n\n\nmeta\n\n\n\n\n\n\nplaylist_id\n\n\ntitle, type\n\n\nplaylist title and type\n\n\nincludes\n\n\n\n\n\n\nplatform_id\n\n\nname\n\n\nplatform ids to names\n\n\nmeta\n\n\n\n\n\n\nplayer_id\n\n\nname\n\n\nplayer ids to names\n\n\nincludes\n\n\n\n\n\n\nad_schedule_id\n\n\nname\n\n\nad schedule id to names\n\n\nincludes\n\n\n\n\n\n\nregion\n\n\nname\n\n\nregions ids to names\n\n\nmeta\n\n\n\n\n\n\ncity\n\n\nname\n\n\ncity ids to names\n\n\nmeta\n\n\n\n\n\n\n\n\nAPI Structure\n\n\nRequest Format\n\n\nRoute: \nhttps://api.jwplayer.com/v2/sites/{site api key}/analytics/queries/\n\n\nBody:\n\n\n    {\n    \nstart_date\n: \nyyyy-mm-dd\n,\n    \nend_date\n: \nyyyy-mm-dd\n,\n    \ndimensions\n: [\ndimension_id\n],\n    \nmetrics\n: [{\n        \noperation\n: \n=/!=\n,\n        \nfield\n: \nmetric_id\n\n    }],\n    \nfilter\n: [{\n        \nfield\n: \ndimension_id\n,\n        \noperator\n: \noperation\n,\n        \nvalue\n: [\ndimension_value\n]\n    }],\n    \npage\n: \npage index\n,\n    \npage_length\n: \npage length\n,\n    \nsort\n: [{\n        \nfield\n: \nmetric_id\n,\n        \norder\n: \nASCENDING/DESCENDING\n\n    }]\n    }\n\n\n\n\nResponse format:\n\n\n    {\n        \ndata\n: {\n            \nrows\n: [\n                [\n                    \ncolumn1value\n,\n                    \ncolumn2value\n,\n                    ...\n                ],\n                ...\n            ]\n        },\n        \nmetadata\n: {\n            \ncolumn_headers\n: {\n                \ndimensions\n: [\n                    {\n                        \nfield\n: \ndimension_id\n,\n                        \ntype\n: \ndatatype\n\n                    },\n                    ...\n                ]\n                \nmetrics\n: [\n                    {\n                        \nfield\n: \nplays\n,\n                        \nunits\n: \ndataype\n\n                    },\n                    ...\n                ]\n            }\n        },\n        \npage\n: \npage number\n,\n        \npage_length\n: \npage length\n,\n        \ntype\n: \nquery_results\n,\n        \nincludes\n: {\n            \nobject_id\n: {\n                \nmetadata varies\n\n            }\n        }\n    }\n\n\n\n\nExamples\n\n\nExample 1 (Curl) request:\n\n\nSummary:\n Total Plays for each media id for a given date range.\n\n\ncurl -X POST https://api.jwplayer.com/v2/sites/{site api key}/analytics/queries/ \\\n -H 'Authorization: {site token secret}' \\\n -H 'Content-Type: application/json' \\\n -d '{\nstart_date\n : \n2017-06-01\n, \nend_date\n : \n2017-06-02\n, \ndimensions\n : [\nmedia_id\n], \nmetrics\n : [{\noperation\n: \nsum\n, \nfield\n: \nplays\n}], \nsort\n : [{\nfield\n : \nplays\n, \norder\n: \nDESCENDING\n}]}'\n\n\n\n\nExample 1 (Curl) response:\n\n\n{\n    \npage\n: 0,\n    \npage_length\n: 10,\n    \ndata\n: {\n        \nrows\n: [\n            [\nEUijQ1Ay\n, 38009],\n            [\noSRD4xzP\n, 27287],\n            [\niD7vAER7\n, 27189]\n        ]\n    },\n    \ntype\n: \nquery_results\n,\n    \nmetadata\n: {\n        \ncolumn_headers\n: {\n            \ndimensions\n: [{\n                \ntype\n: \nstring\n,\n                \nfield\n: \nmedia_id\n\n            }],\n            \nmetrics\n: [{\n                \nfield\n: \nplays\n,\n                \nunits\n: \ninteger\n\n            }]\n        }\n    }\n}\n\n\n\n\nExample 2 (Post) request:\n\n\nSummary:\n Embeds for each country code for a given date range (for the top two countries).  Filter: only for Desktop.\n\n\nPOST: https://api.jwplayer.com/v2/sites/{site api key}/analytics/queries/ \\\n-H 'Authorization: {site token secret}' \\\n-d {\n    \nstart_date\n: \n2017-06-01\n,\n    \nend_date\n: \n2017-06-02\n,\n    \ndimensions\n: [\ncountry_code\n],\n    \nmetrics\n: [{\n        \noperation\n: \nsum\n,\n        \nfield\n: \nplays\n\n    }],\n    \nfilter\n: [{\n        \nfield\n: \ndevice_id\n,\n        \noperator\n: \n=\n,\n        \nvalue\n: [\nDesktop\n]\n    }],\n    \npage\n: 0,\n    \npage_length\n: 2,\n    \nsort\n: [{\n        \nfield\n: \nplays\n,\n        \norder\n: \nDESCENDING\n\n    }]\n}\n\n\n\n\nExample 2 (Post) response:\n\n\n{\n    \ntype\n: \nquery_results\n,\n    \npage\n: 0,\n    \nmetadata\n: {\n        \ncolumn_headers\n: {\n            \ndimensions\n: [{\n                \ntype\n: \nstring\n,\n                \nfield\n: \ncountry_code\n\n            }, {\n                \ntype\n: \nstring\n,\n                \nfield\n: \ndevice_id\n\n            }],\n            \nmetrics\n: [{\n                \nunits\n: \ninteger\n,\n                \nfield\n: \nplays\n\n            }]\n        }\n    },\n    \npage_length\n: 2,\n    \ndata\n: {\n        \nrows\n: [\n            [\nUS\n, \nDesktop\n, 37473],\n            [\nGB\n, \nDesktop\n, 5368]\n        ]\n    }\n}\n\n\n\n\nExample 3 (Post) Request:\n\n\nSummary:\n Total Plays and Embeds by device, for a given date range (title and tag metadata included)\n\n\nPOST: https://api.jwplayer.com/v2/sites/{site api key}/analytics/queries/ \\\n-H 'Authorization: {site token secret}' \\\n-d\n{\n    \nstart_date\n: \n2017-02-01\n,\n    \nend_date\n: \n2017-03-01\n,\n    \ndimensions\n: [\nmedia_id\n],\n    \ninclude_metadata\n: 1,\n    \nmetrics\n: [{\n        \noperation\n: \nsum\n,\n        \nfield\n: \nembeds\n\n    }, {\n        \noperation\n: \nsum\n,\n        \nfield\n: \nplays\n\n    }],\n    \nsort\n: [{\n        \nfield\n: \nembeds\n,\n        \norder\n: \nDESCENDING\n\n    }]\n}\n\n\n\n\nExample 3 (Post) Response:\n\n\n{\n    \ntype\n: \nquery_results\n,\n    \npage\n: 0,\n    \nincludes\n: [{\n        \ntype\n: \nmedia_id\n,\n        \niD7vAER7\n: {\n            \ntag\n: [\nbackground\n, \nhomepage\n, \njwplayer\n, \ntimelapse\n],\n            \ntitle\n: \nBrooklyn Bridge Time Lapse\n\n        }\n    }, {\n        \ntype\n: \nmedia_id\n,\n        \nEUijQ1Ay\n: {\n            \ntag\n: [\nbackground\n, \nhomepage\n],\n            \ntitle\n: \nJellyfish\n\n        }\n    }, {\n        \ntype\n: \nmedia_id\n,\n        \noSRD4xzP\n: {\n            \ntag\n: [\nbackground\n, \nhomepage\n, \nsmoke\n],\n            \ntitle\n: \nWhiskey Smoke\n\n        }\n    }],\n    \ndata\n: {\n        \nrows\n: [\n            [\nEUijQ1Ay\n, 60053, 526600],\n            [\noSRD4xzP\n, 53571, 401269],\n            [\niD7vAER7\n, 52965, 401748]\n        ]\n    },\n    \npage_length\n: 10,\n    \nmetadata\n: {\n        \ncolumn_headers\n: {\n            \ndimensions\n: [{\n                \ntype\n: \nstring\n,\n                \nfield\n: \nmedia_id\n\n            }],\n            \nmetrics\n: [{\n                \nunits\n: \ninteger\n,\n                \nfield\n: \nembeds\n\n            }, {\n                \nunits\n: \ninteger\n,\n                \nfield\n: \nplays\n\n            }]\n        }\n    }\n}", 
            "title": "Analytics"
        }, 
        {
            "location": "/management-api/analytics/#analytics", 
            "text": "The JW Player Analytics endpoint allows you to access your Video and Advertising data programmatically.  This way, JW Player users are able to pull JW Player data into their own application, data warehouse, or analytics tools.  If you're looking for reports and visualizations to analyze your data, you can use the JW Player Dashboard.", 
            "title": "Analytics"
        }, 
        {
            "location": "/management-api/analytics/#getting-started", 
            "text": "Skip to API Examples", 
            "title": "Getting Started"
        }, 
        {
            "location": "/management-api/analytics/#obtaining-your-site-api-key-secret", 
            "text": "Each request to the Analytics API is for a specific JW Player site (or property) within your account.  To query data for one of your JW Player sites, you will need to obtain your site API key.  You can find each property\u2019s API Key in the JW Player Dashboard by navigating to Account   API Credentials and clicking \"Show Credentials\" for the relevant site.  To find your secret, you'll find JW Reporting API Credentials at the bottom of the api credentials page.  You may need to first create a Private API key here if you have not already.  !!!warning\nThe property api secret will not work for this endpoint - you must use the secret specific to the Reporting API\n!!!", 
            "title": "Obtaining your Site API Key &amp; Secret"
        }, 
        {
            "location": "/management-api/analytics/#api-rules", 
            "text": "The following rules apply to all JW Player users.  Users with access to our Enterprise platform have additional functionality described  here .   Data Start Date  - 2017-01-01  Data Timeliness  - Updated  every ~30 minutes during peak traffic  Rate Limiting  - 60 requests/minute per API Token or IP  Max number of dimensions  - 1  Max number of metrics  - 5  Max page length  - 100 rows per page maximum  Max # of filters  - 1 filter (for 1 dimension)  All dates are Eastern", 
            "title": "API Rules"
        }, 
        {
            "location": "/management-api/analytics/#metrics-dimensions-and-filters", 
            "text": "", 
            "title": "Metrics, Dimensions, and Filters"
        }, 
        {
            "location": "/management-api/analytics/#metrics", 
            "text": "A metric is a quantitative measurement.  Visit our  support doc  to learn more about how each metric is defined.  The following metrics are currently supported for all JW Player customers:     Metric Name  metric_id  Units      Embeds  embeds  integer    Plays  plays  integer    Completes  completes  integer    Time Watched  time_watched  integer    Ad Impressions  ad_impressions  integer    25% Completes  25_percent_completes  integer    50% Completes  50_percent_completes  integer    75% Completes  75_percent_completees  integer", 
            "title": "Metrics"
        }, 
        {
            "location": "/management-api/analytics/#dimensions", 
            "text": "A dimension is an attribute of your metric(s).  For example, each Play event has several attributes that help describe it.  We determine what Country it took place in, what Video it was for, what device was used, etc.  Selecting a dimension will tell us how the metrics grouped in your response.  The following dimensions are currently supported for all JW Player customers:     Dimension  dimension_id  Format      Eastern Date  eastern_date  'yyyy-mm-dd'    Media  media_id  media_id    Device  device_id  custom - string    Country  country_code  ISO 3166-1    Playlist  playlist_id  playlist_id    Platform  platform_id  custom - string    Player  player_id  player_id    Ad Schedule  ad_schedule_id  ad_schedule_id    Page Domain  page_domain  N/A", 
            "title": "Dimensions"
        }, 
        {
            "location": "/management-api/analytics/#filters-optional", 
            "text": "A filter is a query element that you can apply to focus on a specific segment of your data.  You can choose to pass a dimension, and operator (equals, does not equal), and a value.", 
            "title": "Filters (optional)"
        }, 
        {
            "location": "/management-api/analytics/#enterprise-functionality", 
            "text": "!!!important\nThe following advanced metrics and dimensions are available only to enterprise JW Player customers with Advanced Analytics. \nFor each request, the date range must be within the last 90 days.\nIf you'd like to speak with a JW Player representative about upgrading your account, please  Contact Us \n!!!  In addition to the functionality described in the rest of this doc, Enterprise customers are also able to:   Group by 2 dimensions  Apply up to 10 filters  Use the following dimensions and metrics      Dimension  dimension_id  Format      Region  region  custom - string    City  city  custom - string    Page URL  page_url  N/A    Media Tags  tag  N/A    Video Duration  video_duration  custom - string        Metric Name  metric_id  Unit      Ad Clicks  ad_clicks  integer    Ad Skips  ad_skips  integer    Ad Completes  ad_completes  integer    Unique Viewers  unique_viewers  integer    Ad Impressions per Viewer  ads_per_viewer  total / viewer    Plays per Viewer  plays_per_viewer  total / viewer    Time watched per viewer  time_watched_per_viewer  seconds / viewer    Complete Rate  complete_rate  percent     Enterprise customers also have the option to enrich their response with additional metadata (instead of just obtaining JW Platform IDs).  This is available for the dimensions listed below, and can be enabled by adding  \"include_metadata\": \"1\"  to the request.     dimension_id  Metadata  Metadata description  Response block      media_id  title, tag  media title and tags  includes    device_id  name  device ids to names  meta    country_code  name  country codes(ISO 3166-1) to names  meta    playlist_id  title, type  playlist title and type  includes    platform_id  name  platform ids to names  meta    player_id  name  player ids to names  includes    ad_schedule_id  name  ad schedule id to names  includes    region  name  regions ids to names  meta    city  name  city ids to names  meta", 
            "title": "Enterprise Functionality"
        }, 
        {
            "location": "/management-api/analytics/#api-structure", 
            "text": "", 
            "title": "API Structure"
        }, 
        {
            "location": "/management-api/analytics/#request-format", 
            "text": "Route:  https://api.jwplayer.com/v2/sites/{site api key}/analytics/queries/  Body:      {\n     start_date :  yyyy-mm-dd ,\n     end_date :  yyyy-mm-dd ,\n     dimensions : [ dimension_id ],\n     metrics : [{\n         operation :  =/!= ,\n         field :  metric_id \n    }],\n     filter : [{\n         field :  dimension_id ,\n         operator :  operation ,\n         value : [ dimension_value ]\n    }],\n     page :  page index ,\n     page_length :  page length ,\n     sort : [{\n         field :  metric_id ,\n         order :  ASCENDING/DESCENDING \n    }]\n    }", 
            "title": "Request Format"
        }, 
        {
            "location": "/management-api/analytics/#response-format", 
            "text": "{\n         data : {\n             rows : [\n                [\n                     column1value ,\n                     column2value ,\n                    ...\n                ],\n                ...\n            ]\n        },\n         metadata : {\n             column_headers : {\n                 dimensions : [\n                    {\n                         field :  dimension_id ,\n                         type :  datatype \n                    },\n                    ...\n                ]\n                 metrics : [\n                    {\n                         field :  plays ,\n                         units :  dataype \n                    },\n                    ...\n                ]\n            }\n        },\n         page :  page number ,\n         page_length :  page length ,\n         type :  query_results ,\n         includes : {\n             object_id : {\n                 metadata varies \n            }\n        }\n    }", 
            "title": "Response format:"
        }, 
        {
            "location": "/management-api/analytics/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/management-api/analytics/#example-1-curl-request", 
            "text": "Summary:  Total Plays for each media id for a given date range.  curl -X POST https://api.jwplayer.com/v2/sites/{site api key}/analytics/queries/ \\\n -H 'Authorization: {site token secret}' \\\n -H 'Content-Type: application/json' \\\n -d '{ start_date  :  2017-06-01 ,  end_date  :  2017-06-02 ,  dimensions  : [ media_id ],  metrics  : [{ operation :  sum ,  field :  plays }],  sort  : [{ field  :  plays ,  order :  DESCENDING }]}'", 
            "title": "Example 1 (Curl) request:"
        }, 
        {
            "location": "/management-api/analytics/#example-1-curl-response", 
            "text": "{\n     page : 0,\n     page_length : 10,\n     data : {\n         rows : [\n            [ EUijQ1Ay , 38009],\n            [ oSRD4xzP , 27287],\n            [ iD7vAER7 , 27189]\n        ]\n    },\n     type :  query_results ,\n     metadata : {\n         column_headers : {\n             dimensions : [{\n                 type :  string ,\n                 field :  media_id \n            }],\n             metrics : [{\n                 field :  plays ,\n                 units :  integer \n            }]\n        }\n    }\n}", 
            "title": "Example 1 (Curl) response:"
        }, 
        {
            "location": "/management-api/analytics/#example-2-post-request", 
            "text": "Summary:  Embeds for each country code for a given date range (for the top two countries).  Filter: only for Desktop.  POST: https://api.jwplayer.com/v2/sites/{site api key}/analytics/queries/ \\\n-H 'Authorization: {site token secret}' \\\n-d {\n     start_date :  2017-06-01 ,\n     end_date :  2017-06-02 ,\n     dimensions : [ country_code ],\n     metrics : [{\n         operation :  sum ,\n         field :  plays \n    }],\n     filter : [{\n         field :  device_id ,\n         operator :  = ,\n         value : [ Desktop ]\n    }],\n     page : 0,\n     page_length : 2,\n     sort : [{\n         field :  plays ,\n         order :  DESCENDING \n    }]\n}", 
            "title": "Example 2 (Post) request:"
        }, 
        {
            "location": "/management-api/analytics/#example-2-post-response", 
            "text": "{\n     type :  query_results ,\n     page : 0,\n     metadata : {\n         column_headers : {\n             dimensions : [{\n                 type :  string ,\n                 field :  country_code \n            }, {\n                 type :  string ,\n                 field :  device_id \n            }],\n             metrics : [{\n                 units :  integer ,\n                 field :  plays \n            }]\n        }\n    },\n     page_length : 2,\n     data : {\n         rows : [\n            [ US ,  Desktop , 37473],\n            [ GB ,  Desktop , 5368]\n        ]\n    }\n}", 
            "title": "Example 2 (Post) response:"
        }, 
        {
            "location": "/management-api/analytics/#example-3-post-request", 
            "text": "Summary:  Total Plays and Embeds by device, for a given date range (title and tag metadata included)  POST: https://api.jwplayer.com/v2/sites/{site api key}/analytics/queries/ \\\n-H 'Authorization: {site token secret}' \\\n-d\n{\n     start_date :  2017-02-01 ,\n     end_date :  2017-03-01 ,\n     dimensions : [ media_id ],\n     include_metadata : 1,\n     metrics : [{\n         operation :  sum ,\n         field :  embeds \n    }, {\n         operation :  sum ,\n         field :  plays \n    }],\n     sort : [{\n         field :  embeds ,\n         order :  DESCENDING \n    }]\n}", 
            "title": "Example 3 (Post) Request:"
        }, 
        {
            "location": "/management-api/analytics/#example-3-post-response", 
            "text": "{\n     type :  query_results ,\n     page : 0,\n     includes : [{\n         type :  media_id ,\n         iD7vAER7 : {\n             tag : [ background ,  homepage ,  jwplayer ,  timelapse ],\n             title :  Brooklyn Bridge Time Lapse \n        }\n    }, {\n         type :  media_id ,\n         EUijQ1Ay : {\n             tag : [ background ,  homepage ],\n             title :  Jellyfish \n        }\n    }, {\n         type :  media_id ,\n         oSRD4xzP : {\n             tag : [ background ,  homepage ,  smoke ],\n             title :  Whiskey Smoke \n        }\n    }],\n     data : {\n         rows : [\n            [ EUijQ1Ay , 60053, 526600],\n            [ oSRD4xzP , 53571, 401269],\n            [ iD7vAER7 , 52965, 401748]\n        ]\n    },\n     page_length : 10,\n     metadata : {\n         column_headers : {\n             dimensions : [{\n                 type :  string ,\n                 field :  media_id \n            }],\n             metrics : [{\n                 units :  integer ,\n                 field :  embeds \n            }, {\n                 units :  integer ,\n                 field :  plays \n            }]\n        }\n    }\n}", 
            "title": "Example 3 (Post) Response:"
        }, 
        {
            "location": "/management-api/advertising/", 
            "text": "Advertising\n\n\nThe JW Player Advertising endpoints allow you to manage advertising schedules programmatically.\n\n\nObtaining your Site ID and API Secret\n\n\nEach request to the Advertising API is for a specific JW Player site (or property) within your account.  To query data for one of your JW Player sites, you will need to obtain your Site ID and API Secret.\n\n\nYou can find each property\u2019s Site ID in the JW Player Dashboard by navigating to Account \n API Credentials and clicking \"Show Credentials\" for the relevant site.  The key displayed is your Site ID.\n\n\nTo find your API Secret, you'll find JW Reporting API Credentials at the bottom of the API credentials page.  You may need to first create a Private API key here if you have not already.  Clicking \"Show Credentials\" will display your API Secret.\n\n\n!!!warning\nThe property API Secret will not work for this endpoint - you must use the secret specific to the Reporting API\n!!!\n\n\nExample requests\n\n\nUsing the \nsite_id\n and \napi_secret\n obtained in the previous steps a request for all schedules for a site would look like:\n\n\ncurl -X GET https://api.jwplayer.com/v2/sites/\nsite_id\n/advertising/schedules/  \\\n-H 'Authorization: \napi_secret\n'  -H 'Content-Type: application/json'\n\n\n\n\nAPI Structure\n\n\nCreate a new advertising schedule\n\n\nPOST\n\n\n/sites/{site_id}/advertising/schedules/\n\n\nCreates a new advertising schedule\n\n\nParameters\n\n\n\n\n\n\n\n\nParam Name\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsite_id\n\n\nstring\n\n\nThe unique 8 character identifier for the site.\n\n\nYES\n\n\n\n\n\n\n\n\nRequest body\n\n\nA resource object describing an ad schedule.\n\n\n\n\n\n\n\n\nParam Name\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmetadata\n\n\nJSON\n\n\nYES\n\n\n\n\n\n\nmetadata.name\n\n\nstring\n\n\nYES\n\n\n\n\n\n\nmetadata.client\n\n\nstring\n\n\nYES\n\n\n\n\n\n\nmetadata.is_vmap\n\n\nboolean\n\n\nNO\n\n\n\n\n\n\nmetadata.vpaidmode\n\n\nstring\n\n\nNO\n\n\n\n\n\n\nmetadata.breaks\n\n\nArray of object\n\n\nYES\n\n\n\n\n\n\nmetadata.breaks.tags\n\n\nArray of string\n\n\nYES\n\n\n\n\n\n\nmetadata.breaks.offset\n\n\nstring\n\n\nYES\n\n\n\n\n\n\nmetadata.breaks.skipoffset\n\n\ninteger\n\n\nNO\n\n\n\n\n\n\nmetadata.breaks.type\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nRequest samples:\n\n\n{\n  \nmetadata\n: {\n    \nname\n: \nExample Ad Schedule\n,\n    \nbreaks\n: [\n      {\n        \ntags\n: [\n          \nhttp://doubleclick.com/tag1.xml\n\n        ],\n        \noffset\n: 180.123,\n        \nskipoffset\n: 5,\n        \ntype\n: \nlinear\n\n      }\n    ],\n    \nclient\n: \nvast\n,\n    \nis_vmap\n: false,\n    \nvpaidmode\n: \nsecure\n\n  }\n}\n\n\n\n\nResponse schema\n\n\nResponse body\n\n\n\n\n\n\n\n\nParam Name\n\n\nType\n\n\nRequired\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nid\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschema\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\ncreated\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nlast_modified\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata\n\n\nJSON\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.name\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.client\n\n\nstring\n\n\nYES\n\n\nValid values 'vast', 'googima'\n\n\n\n\n\n\nmetadata.is_vmap\n\n\nboolean\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.vpaidmode\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.breaks\n\n\nArray of object\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.tags\n\n\nArray of string\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.offset\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.skipoffset\n\n\ninteger\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.breaks.type\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\n\n\nResponse samples:\n\n\n201 Created:\n\n\n{\n  \nid\n: \naBcdEf12\n,\n  \ntype\n: \nadschedule\n,\n  \nschema\n: \nhttps://schema.jwplayer.com/types/adschedule.json\n,\n  \ncreated\n: \n2017-05-22T15:02:18-4:00\n,\n  \nlast_modified\n: \n2017-05-22T15:02:18-4:00\n,\n  \nmetadata\n: {\n    \nname\n: \nExample Ad Schedule\n,\n    \nbreaks\n: [\n      {\n        \ntags\n: [\n          \nhttp://doubleclick.com/tag1.xml\n\n        ],\n        \noffset\n: 180.123,\n        \nskipoffset\n: 5,\n        \ntype\n: \nlinear\n\n      }\n    ],\n    \nclient\n: \nvast\n,\n    \nis_vmap\n: false,\n    \nvpaidmode\n: \nsecure\n,\n    \nversion\n: \n1.0\n\n  }\n}\n\n\n\n\n400 Bad request\n\n\nHEADERS\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nX-Rate-Limit-Limit\n\n\ninteger\n\n\nThe number of allowed requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Remaining\n\n\ninteger\n\n\nThe number of remaining requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Reset\n\n\ninteger\n\n\nThe number of seconds left in the current period\n\n\n\n\n\n\n\n\nResponse schema\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nerror\n\n\n\n\n\n\nerror.code\n\n\nstring\n\n\n\n\n\n\nerror.description\n\n\nstring\n\n\n\n\n\n\n\n\n{\n  \nerror\n: {\n    \ncode\n: 400,\n    \ndescription\n: \nBad request\n\n  }\n}\n\n\n\n\nFetch a list of advertising schedules\n\n\nGET\n\n\n/sites/{site_id}/advertising/schedules/\n\n\nFetches a list of advertising schedules\n\n\nParameters\n\n\n\n\n\n\n\n\nParam Name\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nsite_id\n\n\nstring\n\n\nThe unique 8 character identifier for the site.\n\n\nYES\n\n\n\n\n\n\n\n\nPath parameters\n\n\nA resource object describing an ad schedule.\n\n\n\n\n\n\n\n\nParam Name\n\n\nType\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\npage_length\n\n\ninteger \n=1000\n\n\nThis parameter specifies the page size to return. Default behavior is 10 items.\n\n\n\n\n\n\npage\n\n\ninteger\n\n\nThis parameter specifies the offset for the page to return.\n\n\n\n\n\n\n\n\nResponse body\n\n\n\n\n\n\n\n\nParam Name\n\n\nType\n\n\nRequired\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nid\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschema\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\ncreated\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nlast_modified\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata\n\n\nJSON\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.name\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.client\n\n\nstring\n\n\nYES\n\n\nValid values 'vast', 'googima'\n\n\n\n\n\n\nmetadata.is_vmap\n\n\nboolean\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.vpaidmode\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.breaks\n\n\nArray of object\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.tags\n\n\nArray of string\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.offset\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.skipoffset\n\n\ninteger\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.breaks.type\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\n\n\nResponse samples:\n\n\n200 OK\n\n\n{\n  \nschedules\n: [\n    {\n      \nid\n: \naBcdEf12\n,\n      \ntype\n: \nadschedule\n,\n      \nschema\n: \nhttps://schema.jwplayer.com/types/adschedule.json\n,\n      \ncreated\n: \n2017-05-22T15:02:18-4:00\n,\n      \nlast_modified\n: \n2017-05-22T15:02:18-4:00\n,\n      \nmetadata\n: {\n        \nname\n: \nExample Ad Schedule\n,\n        \nbreaks\n: [\n          {\n            \ntags\n: [\n              \nhttp://doubleclick.com/tag1.xml\n\n            ],\n            \noffset\n: 180.123,\n            \nskipoffset\n: 5,\n            \ntype\n: \nlinear\n\n          }\n        ],\n        \nclient\n: \nvast\n,\n        \nis_vmap\n: false,\n        \nvpaidmode\n: \nsecure\n,\n        \nversion\n: \n1.0\n\n      }\n    }\n  ],\n  \npage\n: 1,\n  \npage_length\n: 10,\n  \ntotal\n: 4\n}\n\n\n\n\nResponse schema\n\n\n\n\n\n\n\n\nParam Name\n\n\nType\n\n\nRequired\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nschedules\n\n\nArray of ad_schedule_resource\n\n\n\n\n\n\n\n\n\n\nschedules.id\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.type\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.schema\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.created\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.last_modified\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.metadata\n\n\nJSON\n\n\nYES\n\n\n\n\n\n\n\n\nschedules.metadata.name\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nschedules.metadata.client\n\n\nstring\n\n\nYES\n\n\nValid values 'vast', 'googima'\n\n\n\n\n\n\nschedules.metadata.is_vmap\n\n\nboolean\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.metadata.vpaidmode\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.metadata.version\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.metadata.breaks\n\n\nArray of object\n\n\nYES\n\n\n\n\n\n\n\n\nschedules.metadata.breaks.tags\n\n\nArray of string\n\n\nYES\n\n\n\n\n\n\n\n\nschedules.metadata.breaks.offset\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nschedules.metadata.breaks.skipoffset\n\n\ninteger\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.metadata.breaks.type\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\npage_length\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\npage\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\ntotal\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\n\n\nRetrieve an advertising schedule\n\n\nGET\n\n\n/sites/{site_id}/advertising/schedules/{ad_schedule_id}/\n\n\nRetrieves an advertising schedule\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nsite_id\n\n\nstring\n\n\nYES\n\n\nThe unique 8 character identifier for the site.\n\n\n\n\n\n\nad_schedule_id\n\n\nstring\n\n\nYES\n\n\nThe unique 8 character identifier for the ad schedule.\n\n\n\n\n\n\n\n\nResponse samples:\n\n\n200 OK\n\n\n{\n  \nid\n: \naBcdEf12\n,\n  \ntype\n: \nadschedule\n,\n  \nschema\n: \nhttps://schema.jwplayer.com/types/adschedule.json\n,\n  \ncreated\n: \n2017-05-22T15:02:18-4:00\n,\n  \nlast_modified\n: \n2017-05-22T15:02:18-4:00\n,\n  \nmetadata\n: {\n    \nname\n: \nExample Ad Schedule\n,\n    \nbreaks\n: [\n      {\n        \ntags\n: [\n          \nhttp://doubleclick.com/tag1.xml\n\n        ],\n        \noffset\n: 180.123,\n        \nskipoffset\n: 5,\n        \ntype\n: \nlinear\n\n      }\n    ],\n    \nclient\n: \nvast\n,\n    \nis_vmap\n: false,\n    \nvpaidmode\n: \nsecure\n,\n    \nversion\n: \n1.0\n\n  }\n}\n\n\n\n\nResponse schema\n\n\n\n\n\n\n\n\nParam Name\n\n\nType\n\n\nRequired\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nschedules\n\n\nArray of ad_schedule_resource\n\n\n\n\n\n\n\n\n\n\nschedules.id\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.type\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.schema\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.created\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.last_modified\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.metadata\n\n\nJSON\n\n\nYES\n\n\n\n\n\n\n\n\nschedules.metadata.name\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nschedules.metadata.client\n\n\nstring\n\n\nYES\n\n\nValid values 'vast', 'googima'\n\n\n\n\n\n\nschedules.metadata.is_vmap\n\n\nboolean\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.metadata.vpaidmode\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.metadata.version\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.metadata.breaks\n\n\nArray of object\n\n\nYES\n\n\n\n\n\n\n\n\nschedules.metadata.breaks.tags\n\n\nArray of string\n\n\nYES\n\n\n\n\n\n\n\n\nschedules.metadata.breaks.offset\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nschedules.metadata.breaks.skipoffset\n\n\ninteger\n\n\nNO\n\n\n\n\n\n\n\n\nschedules.metadata.breaks.type\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\n\n\n403 Forbidden\n\n\nHEADERS\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nX-Rate-Limit-Limit\n\n\ninteger\n\n\nThe number of allowed requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Remaining\n\n\ninteger\n\n\nThe number of remaining requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Reset\n\n\ninteger\n\n\nThe number of seconds left in the current period\n\n\n\n\n\n\n\n\nResponse schema\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nerror\n\n\n\n\n\n\nerror.code\n\n\nstring\n\n\n\n\n\n\nerror.description\n\n\nstring\n\n\n\n\n\n\n\n\n{\n  \nerror\n: {\n    \ncode\n: 403,\n    \ndescription\n: \nForbidden, this API token is not authorized to make this call\n\n  }\n}\n\n\n\n\n404 Not found\n\n\nHEADERS\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nX-Rate-Limit-Limit\n\n\ninteger\n\n\nThe number of allowed requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Remaining\n\n\ninteger\n\n\nThe number of remaining requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Reset\n\n\ninteger\n\n\nThe number of seconds left in the current period\n\n\n\n\n\n\n\n\nResponse schema\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nerror\n\n\n\n\n\n\nerror.code\n\n\nstring\n\n\n\n\n\n\nerror.description\n\n\nstring\n\n\n\n\n\n\n\n\n{\n  \nerror\n: {\n    \ncode\n: 404,\n    \ndescription\n: \nNot Found, this resource was not found\n\n  }\n}\n\n\n\n\nPatch an advertising schedule\n\n\nPATCH\n\n\n/sites/{site_id}/advertising/schedules/{ad_schedule_id}/\n\n\nPatches an advertising schedule\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nsite_id\n\n\nstring\n\n\nYES\n\n\nThe unique 8 character identifier for the site.\n\n\n\n\n\n\nad_schedule_id\n\n\nstring\n\n\nYES\n\n\nThe unique 8 character identifier for the ad schedule.\n\n\n\n\n\n\n\n\nRequest body\n\n\n\n\n\n\n\n\nParam Name\n\n\nType\n\n\nRequired\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nmetadata\n\n\nJSON\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.name\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.client\n\n\nstring\n\n\nYES\n\n\nValid values 'vast', 'googima'\n\n\n\n\n\n\nmetadata.is_vmap\n\n\nboolean\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.vpaidmode\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.breaks\n\n\nArray of object\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.tags\n\n\nArray of string\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.offset\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.skipoffset\n\n\ninteger\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.breaks.type\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\n\n\nRequest samples:\n\n\n{\n  \nmetadata\n: {\n    \nname\n: \nExample Ad Schedule\n,\n    \nbreaks\n: [\n      {\n        \ntags\n: [\n          \nhttp://doubleclick.com/tag1.xml\n\n        ],\n        \noffset\n: 180.123,\n        \nskipoffset\n: 5,\n        \ntype\n: \nlinear\n\n      }\n    ],\n    \nclient\n: \nvast\n,\n    \nis_vmap\n: false,\n    \nvpaidmode\n: \nsecure\n\n  }\n}\n\n\n\n\nResponse schema\n\n\n200 OK\n\n\nResponse body\n\n\n\n\n\n\n\n\nParam Name\n\n\nType\n\n\nRequired\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nid\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nschema\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\ncreated\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nlast_modified\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata\n\n\nJSON\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.name\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.client\n\n\nstring\n\n\nYES\n\n\nValid values 'vast', 'googima'\n\n\n\n\n\n\nmetadata.is_vmap\n\n\nboolean\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.vpaidmode\n\n\nstring\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.breaks\n\n\nArray of object\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.tags\n\n\nArray of string\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.offset\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\nmetadata.breaks.skipoffset\n\n\ninteger\n\n\nNO\n\n\n\n\n\n\n\n\nmetadata.breaks.type\n\n\nstring\n\n\nYES\n\n\n\n\n\n\n\n\n\n\nResponse sample\n\n\n{\n  \nid\n: \naBcdEf12\n,\n  \ntype\n: \nadschedule\n,\n  \nschema\n: \nhttps://schema.jwplayer.com/types/adschedule.json\n,\n  \ncreated\n: \n2017-05-22T15:02:18-4:00\n,\n  \nlast_modified\n: \n2017-05-22T15:02:18-4:00\n,\n  \nmetadata\n: {\n    \nname\n: \nExample Ad Schedule\n,\n    \nbreaks\n: [\n      {\n        \ntags\n: [\n          \nhttp://doubleclick.com/tag1.xml\n\n        ],\n        \noffset\n: 180.123,\n        \nskipoffset\n: 5,\n        \ntype\n: \nlinear\n\n      }\n    ],\n    \nclient\n: \nvast\n,\n    \nis_vmap\n: false,\n    \nvpaidmode\n: \nsecure\n,\n    \nversion\n: \n1.0\n\n  }\n}\n\n\n\n\n400 Bad request\n\n\nHEADERS\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nX-Rate-Limit-Limit\n\n\ninteger\n\n\nThe number of allowed requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Remaining\n\n\ninteger\n\n\nThe number of remaining requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Reset\n\n\ninteger\n\n\nThe number of seconds left in the current period\n\n\n\n\n\n\n\n\nResponse schema\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nerror\n\n\n\n\n\n\nerror.code\n\n\nstring\n\n\n\n\n\n\nerror.description\n\n\nstring\n\n\n\n\n\n\n\n\n{\n  \nerror\n: {\n    \ncode\n: 400,\n    \ndescription\n: \nBad request\n\n  }\n}\n\n\n\n\n403 Forbidden\n\n\nHEADERS\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nX-Rate-Limit-Limit\n\n\ninteger\n\n\nThe number of allowed requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Remaining\n\n\ninteger\n\n\nThe number of remaining requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Reset\n\n\ninteger\n\n\nThe number of seconds left in the current period\n\n\n\n\n\n\n\n\nResponse schema\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nerror\n\n\n\n\n\n\nerror.code\n\n\nstring\n\n\n\n\n\n\nerror.description\n\n\nstring\n\n\n\n\n\n\n\n\n{\n  \nerror\n: {\n    \ncode\n: 403,\n    \ndescription\n: \nForbidden, this API token is not authorized to make this call\n\n  }\n}\n\n\n\n\n404 Not found\n\n\nHEADERS\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nX-Rate-Limit-Limit\n\n\ninteger\n\n\nThe number of allowed requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Remaining\n\n\ninteger\n\n\nThe number of remaining requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Reset\n\n\ninteger\n\n\nThe number of seconds left in the current period\n\n\n\n\n\n\n\n\nResponse schema\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nerror\n\n\n\n\n\n\nerror.code\n\n\nstring\n\n\n\n\n\n\nerror.description\n\n\nstring\n\n\n\n\n\n\n\n\n{\n  \nerror\n: {\n    \ncode\n: 404,\n    \ndescription\n: \nNot Found, this resource was not found\n\n  }\n}\n\n\n\n\nDelete an advertising schedule\n\n\nDELETE\n\n\n/sites/{site_id}/advertising/schedules/{ad_schedule_id}/\n\n\nDeletes an advertising schedule\n\n\nPath Parameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nsite_id\n\n\nstring\n\n\nYES\n\n\nThe unique 8 character identifier for the site.\n\n\n\n\n\n\nad_schedule_id\n\n\nstring\n\n\nYES\n\n\nThe unique 8 character identifier for the ad schedule.\n\n\n\n\n\n\n\n\nResponses\n\n\n200 OK\n\n\n403 Forbidden\n\n\nHEADERS\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nX-Rate-Limit-Limit\n\n\ninteger\n\n\nThe number of allowed requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Remaining\n\n\ninteger\n\n\nThe number of remaining requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Reset\n\n\ninteger\n\n\nThe number of seconds left in the current period\n\n\n\n\n\n\n\n\nResponse schema\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nerror\n\n\n\n\n\n\nerror.code\n\n\nstring\n\n\n\n\n\n\nerror.description\n\n\nstring\n\n\n\n\n\n\n\n\n{\n  \nerror\n: {\n    \ncode\n: 403,\n    \ndescription\n: \nForbidden, this API token is not authorized to make this call\n\n  }\n}\n\n\n\n\n404 Not found\n\n\nHEADERS\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nX-Rate-Limit-Limit\n\n\ninteger\n\n\nThe number of allowed requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Remaining\n\n\ninteger\n\n\nThe number of remaining requests in the current period\n\n\n\n\n\n\nX-Rate-Limit-Reset\n\n\ninteger\n\n\nThe number of seconds left in the current period\n\n\n\n\n\n\n\n\nResponse schema\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nerror\n\n\n\n\n\n\nerror.code\n\n\nstring\n\n\n\n\n\n\nerror.description\n\n\nstring\n\n\n\n\n\n\n\n\n{\n  \nerror\n: {\n    \ncode\n: 404,\n    \ndescription\n: \nNot Found, this resource was not found\n\n  }\n}", 
            "title": "Advertising"
        }, 
        {
            "location": "/management-api/advertising/#advertising", 
            "text": "The JW Player Advertising endpoints allow you to manage advertising schedules programmatically.", 
            "title": "Advertising"
        }, 
        {
            "location": "/management-api/advertising/#obtaining-your-site-id-and-api-secret", 
            "text": "Each request to the Advertising API is for a specific JW Player site (or property) within your account.  To query data for one of your JW Player sites, you will need to obtain your Site ID and API Secret.  You can find each property\u2019s Site ID in the JW Player Dashboard by navigating to Account   API Credentials and clicking \"Show Credentials\" for the relevant site.  The key displayed is your Site ID.  To find your API Secret, you'll find JW Reporting API Credentials at the bottom of the API credentials page.  You may need to first create a Private API key here if you have not already.  Clicking \"Show Credentials\" will display your API Secret.  !!!warning\nThe property API Secret will not work for this endpoint - you must use the secret specific to the Reporting API\n!!!", 
            "title": "Obtaining your Site ID and API Secret"
        }, 
        {
            "location": "/management-api/advertising/#example-requests", 
            "text": "Using the  site_id  and  api_secret  obtained in the previous steps a request for all schedules for a site would look like:  curl -X GET https://api.jwplayer.com/v2/sites/ site_id /advertising/schedules/  \\\n-H 'Authorization:  api_secret '  -H 'Content-Type: application/json'", 
            "title": "Example requests"
        }, 
        {
            "location": "/management-api/advertising/#api-structure", 
            "text": "", 
            "title": "API Structure"
        }, 
        {
            "location": "/management-api/advertising/#create-a-new-advertising-schedule", 
            "text": "", 
            "title": "Create a new advertising schedule"
        }, 
        {
            "location": "/management-api/advertising/#post", 
            "text": "/sites/{site_id}/advertising/schedules/  Creates a new advertising schedule  Parameters     Param Name  Type  Description  Required      site_id  string  The unique 8 character identifier for the site.  YES     Request body  A resource object describing an ad schedule.     Param Name  Type  Required      metadata  JSON  YES    metadata.name  string  YES    metadata.client  string  YES    metadata.is_vmap  boolean  NO    metadata.vpaidmode  string  NO    metadata.breaks  Array of object  YES    metadata.breaks.tags  Array of string  YES    metadata.breaks.offset  string  YES    metadata.breaks.skipoffset  integer  NO    metadata.breaks.type  string  YES", 
            "title": "POST"
        }, 
        {
            "location": "/management-api/advertising/#request-samples", 
            "text": "{\n   metadata : {\n     name :  Example Ad Schedule ,\n     breaks : [\n      {\n         tags : [\n           http://doubleclick.com/tag1.xml \n        ],\n         offset : 180.123,\n         skipoffset : 5,\n         type :  linear \n      }\n    ],\n     client :  vast ,\n     is_vmap : false,\n     vpaidmode :  secure \n  }\n}", 
            "title": "Request samples:"
        }, 
        {
            "location": "/management-api/advertising/#response-schema", 
            "text": "Response body     Param Name  Type  Required  Notes      id  string  NO     type  string  NO     schema  string  NO     created  string  NO     last_modified  string  NO     metadata  JSON  YES     metadata.name  string  YES     metadata.client  string  YES  Valid values 'vast', 'googima'    metadata.is_vmap  boolean  NO     metadata.vpaidmode  string  NO     metadata.breaks  Array of object  YES     metadata.breaks.tags  Array of string  YES     metadata.breaks.offset  string  YES     metadata.breaks.skipoffset  integer  NO     metadata.breaks.type  string  YES", 
            "title": "Response schema"
        }, 
        {
            "location": "/management-api/advertising/#response-samples", 
            "text": "", 
            "title": "Response samples:"
        }, 
        {
            "location": "/management-api/advertising/#201-created", 
            "text": "{\n   id :  aBcdEf12 ,\n   type :  adschedule ,\n   schema :  https://schema.jwplayer.com/types/adschedule.json ,\n   created :  2017-05-22T15:02:18-4:00 ,\n   last_modified :  2017-05-22T15:02:18-4:00 ,\n   metadata : {\n     name :  Example Ad Schedule ,\n     breaks : [\n      {\n         tags : [\n           http://doubleclick.com/tag1.xml \n        ],\n         offset : 180.123,\n         skipoffset : 5,\n         type :  linear \n      }\n    ],\n     client :  vast ,\n     is_vmap : false,\n     vpaidmode :  secure ,\n     version :  1.0 \n  }\n}", 
            "title": "201 Created:"
        }, 
        {
            "location": "/management-api/advertising/#400-bad-request", 
            "text": "", 
            "title": "400 Bad request"
        }, 
        {
            "location": "/management-api/advertising/#headers", 
            "text": "Name  Type  Notes      X-Rate-Limit-Limit  integer  The number of allowed requests in the current period    X-Rate-Limit-Remaining  integer  The number of remaining requests in the current period    X-Rate-Limit-Reset  integer  The number of seconds left in the current period", 
            "title": "HEADERS"
        }, 
        {
            "location": "/management-api/advertising/#response-schema_1", 
            "text": "Name  Type      error  error    error.code  string    error.description  string     {\n   error : {\n     code : 400,\n     description :  Bad request \n  }\n}", 
            "title": "Response schema"
        }, 
        {
            "location": "/management-api/advertising/#fetch-a-list-of-advertising-schedules", 
            "text": "", 
            "title": "Fetch a list of advertising schedules"
        }, 
        {
            "location": "/management-api/advertising/#get", 
            "text": "/sites/{site_id}/advertising/schedules/  Fetches a list of advertising schedules  Parameters     Param Name  Type  Description  Required      site_id  string  The unique 8 character identifier for the site.  YES     Path parameters  A resource object describing an ad schedule.     Param Name  Type  Notes      page_length  integer  =1000  This parameter specifies the page size to return. Default behavior is 10 items.    page  integer  This parameter specifies the offset for the page to return.     Response body     Param Name  Type  Required  Notes      id  string  NO     type  string  NO     schema  string  NO     created  string  NO     last_modified  string  NO     metadata  JSON  YES     metadata.name  string  YES     metadata.client  string  YES  Valid values 'vast', 'googima'    metadata.is_vmap  boolean  NO     metadata.vpaidmode  string  NO     metadata.breaks  Array of object  YES     metadata.breaks.tags  Array of string  YES     metadata.breaks.offset  string  YES     metadata.breaks.skipoffset  integer  NO     metadata.breaks.type  string  YES", 
            "title": "GET"
        }, 
        {
            "location": "/management-api/advertising/#response-samples_1", 
            "text": "", 
            "title": "Response samples:"
        }, 
        {
            "location": "/management-api/advertising/#200-ok", 
            "text": "{\n   schedules : [\n    {\n       id :  aBcdEf12 ,\n       type :  adschedule ,\n       schema :  https://schema.jwplayer.com/types/adschedule.json ,\n       created :  2017-05-22T15:02:18-4:00 ,\n       last_modified :  2017-05-22T15:02:18-4:00 ,\n       metadata : {\n         name :  Example Ad Schedule ,\n         breaks : [\n          {\n             tags : [\n               http://doubleclick.com/tag1.xml \n            ],\n             offset : 180.123,\n             skipoffset : 5,\n             type :  linear \n          }\n        ],\n         client :  vast ,\n         is_vmap : false,\n         vpaidmode :  secure ,\n         version :  1.0 \n      }\n    }\n  ],\n   page : 1,\n   page_length : 10,\n   total : 4\n}", 
            "title": "200 OK"
        }, 
        {
            "location": "/management-api/advertising/#response-schema_2", 
            "text": "Param Name  Type  Required  Notes      schedules  Array of ad_schedule_resource      schedules.id  string  NO     schedules.type  string  NO     schedules.schema  string  NO     schedules.created  string  NO     schedules.last_modified  string  NO     schedules.metadata  JSON  YES     schedules.metadata.name  string  YES     schedules.metadata.client  string  YES  Valid values 'vast', 'googima'    schedules.metadata.is_vmap  boolean  NO     schedules.metadata.vpaidmode  string  NO     schedules.metadata.version  string  NO     schedules.metadata.breaks  Array of object  YES     schedules.metadata.breaks.tags  Array of string  YES     schedules.metadata.breaks.offset  string  YES     schedules.metadata.breaks.skipoffset  integer  NO     schedules.metadata.breaks.type  string  YES     page_length  string  NO     page  string  NO     total  string  NO", 
            "title": "Response schema"
        }, 
        {
            "location": "/management-api/advertising/#retrieve-an-advertising-schedule", 
            "text": "", 
            "title": "Retrieve an advertising schedule"
        }, 
        {
            "location": "/management-api/advertising/#get_1", 
            "text": "/sites/{site_id}/advertising/schedules/{ad_schedule_id}/  Retrieves an advertising schedule  Parameters     Name  Type  Required  Notes      site_id  string  YES  The unique 8 character identifier for the site.    ad_schedule_id  string  YES  The unique 8 character identifier for the ad schedule.", 
            "title": "GET"
        }, 
        {
            "location": "/management-api/advertising/#response-samples_2", 
            "text": "", 
            "title": "Response samples:"
        }, 
        {
            "location": "/management-api/advertising/#200-ok_1", 
            "text": "{\n   id :  aBcdEf12 ,\n   type :  adschedule ,\n   schema :  https://schema.jwplayer.com/types/adschedule.json ,\n   created :  2017-05-22T15:02:18-4:00 ,\n   last_modified :  2017-05-22T15:02:18-4:00 ,\n   metadata : {\n     name :  Example Ad Schedule ,\n     breaks : [\n      {\n         tags : [\n           http://doubleclick.com/tag1.xml \n        ],\n         offset : 180.123,\n         skipoffset : 5,\n         type :  linear \n      }\n    ],\n     client :  vast ,\n     is_vmap : false,\n     vpaidmode :  secure ,\n     version :  1.0 \n  }\n}", 
            "title": "200 OK"
        }, 
        {
            "location": "/management-api/advertising/#response-schema_3", 
            "text": "Param Name  Type  Required  Notes      schedules  Array of ad_schedule_resource      schedules.id  string  NO     schedules.type  string  NO     schedules.schema  string  NO     schedules.created  string  NO     schedules.last_modified  string  NO     schedules.metadata  JSON  YES     schedules.metadata.name  string  YES     schedules.metadata.client  string  YES  Valid values 'vast', 'googima'    schedules.metadata.is_vmap  boolean  NO     schedules.metadata.vpaidmode  string  NO     schedules.metadata.version  string  NO     schedules.metadata.breaks  Array of object  YES     schedules.metadata.breaks.tags  Array of string  YES     schedules.metadata.breaks.offset  string  YES     schedules.metadata.breaks.skipoffset  integer  NO     schedules.metadata.breaks.type  string  YES", 
            "title": "Response schema"
        }, 
        {
            "location": "/management-api/advertising/#403-forbidden", 
            "text": "", 
            "title": "403 Forbidden"
        }, 
        {
            "location": "/management-api/advertising/#headers_1", 
            "text": "Name  Type  Notes      X-Rate-Limit-Limit  integer  The number of allowed requests in the current period    X-Rate-Limit-Remaining  integer  The number of remaining requests in the current period    X-Rate-Limit-Reset  integer  The number of seconds left in the current period", 
            "title": "HEADERS"
        }, 
        {
            "location": "/management-api/advertising/#response-schema_4", 
            "text": "Name  Type      error  error    error.code  string    error.description  string     {\n   error : {\n     code : 403,\n     description :  Forbidden, this API token is not authorized to make this call \n  }\n}", 
            "title": "Response schema"
        }, 
        {
            "location": "/management-api/advertising/#404-not-found", 
            "text": "", 
            "title": "404 Not found"
        }, 
        {
            "location": "/management-api/advertising/#headers_2", 
            "text": "Name  Type  Notes      X-Rate-Limit-Limit  integer  The number of allowed requests in the current period    X-Rate-Limit-Remaining  integer  The number of remaining requests in the current period    X-Rate-Limit-Reset  integer  The number of seconds left in the current period", 
            "title": "HEADERS"
        }, 
        {
            "location": "/management-api/advertising/#response-schema_5", 
            "text": "Name  Type      error  error    error.code  string    error.description  string     {\n   error : {\n     code : 404,\n     description :  Not Found, this resource was not found \n  }\n}", 
            "title": "Response schema"
        }, 
        {
            "location": "/management-api/advertising/#patch-an-advertising-schedule", 
            "text": "", 
            "title": "Patch an advertising schedule"
        }, 
        {
            "location": "/management-api/advertising/#patch", 
            "text": "/sites/{site_id}/advertising/schedules/{ad_schedule_id}/  Patches an advertising schedule  Parameters     Name  Type  Required  Notes      site_id  string  YES  The unique 8 character identifier for the site.    ad_schedule_id  string  YES  The unique 8 character identifier for the ad schedule.     Request body     Param Name  Type  Required  Notes      metadata  JSON  YES     metadata.name  string  YES     metadata.client  string  YES  Valid values 'vast', 'googima'    metadata.is_vmap  boolean  NO     metadata.vpaidmode  string  NO     metadata.breaks  Array of object  YES     metadata.breaks.tags  Array of string  YES     metadata.breaks.offset  string  YES     metadata.breaks.skipoffset  integer  NO     metadata.breaks.type  string  YES", 
            "title": "PATCH"
        }, 
        {
            "location": "/management-api/advertising/#request-samples_1", 
            "text": "{\n   metadata : {\n     name :  Example Ad Schedule ,\n     breaks : [\n      {\n         tags : [\n           http://doubleclick.com/tag1.xml \n        ],\n         offset : 180.123,\n         skipoffset : 5,\n         type :  linear \n      }\n    ],\n     client :  vast ,\n     is_vmap : false,\n     vpaidmode :  secure \n  }\n}", 
            "title": "Request samples:"
        }, 
        {
            "location": "/management-api/advertising/#response-schema_6", 
            "text": "", 
            "title": "Response schema"
        }, 
        {
            "location": "/management-api/advertising/#200-ok_2", 
            "text": "Response body     Param Name  Type  Required  Notes      id  string  NO     type  string  NO     schema  string  NO     created  string  NO     last_modified  string  NO     metadata  JSON  YES     metadata.name  string  YES     metadata.client  string  YES  Valid values 'vast', 'googima'    metadata.is_vmap  boolean  NO     metadata.vpaidmode  string  NO     metadata.breaks  Array of object  YES     metadata.breaks.tags  Array of string  YES     metadata.breaks.offset  string  YES     metadata.breaks.skipoffset  integer  NO     metadata.breaks.type  string  YES      Response sample  {\n   id :  aBcdEf12 ,\n   type :  adschedule ,\n   schema :  https://schema.jwplayer.com/types/adschedule.json ,\n   created :  2017-05-22T15:02:18-4:00 ,\n   last_modified :  2017-05-22T15:02:18-4:00 ,\n   metadata : {\n     name :  Example Ad Schedule ,\n     breaks : [\n      {\n         tags : [\n           http://doubleclick.com/tag1.xml \n        ],\n         offset : 180.123,\n         skipoffset : 5,\n         type :  linear \n      }\n    ],\n     client :  vast ,\n     is_vmap : false,\n     vpaidmode :  secure ,\n     version :  1.0 \n  }\n}", 
            "title": "200 OK"
        }, 
        {
            "location": "/management-api/advertising/#400-bad-request_1", 
            "text": "", 
            "title": "400 Bad request"
        }, 
        {
            "location": "/management-api/advertising/#headers_3", 
            "text": "Name  Type  Notes      X-Rate-Limit-Limit  integer  The number of allowed requests in the current period    X-Rate-Limit-Remaining  integer  The number of remaining requests in the current period    X-Rate-Limit-Reset  integer  The number of seconds left in the current period", 
            "title": "HEADERS"
        }, 
        {
            "location": "/management-api/advertising/#response-schema_7", 
            "text": "Name  Type      error  error    error.code  string    error.description  string     {\n   error : {\n     code : 400,\n     description :  Bad request \n  }\n}", 
            "title": "Response schema"
        }, 
        {
            "location": "/management-api/advertising/#403-forbidden_1", 
            "text": "", 
            "title": "403 Forbidden"
        }, 
        {
            "location": "/management-api/advertising/#headers_4", 
            "text": "Name  Type  Notes      X-Rate-Limit-Limit  integer  The number of allowed requests in the current period    X-Rate-Limit-Remaining  integer  The number of remaining requests in the current period    X-Rate-Limit-Reset  integer  The number of seconds left in the current period", 
            "title": "HEADERS"
        }, 
        {
            "location": "/management-api/advertising/#response-schema_8", 
            "text": "Name  Type      error  error    error.code  string    error.description  string     {\n   error : {\n     code : 403,\n     description :  Forbidden, this API token is not authorized to make this call \n  }\n}", 
            "title": "Response schema"
        }, 
        {
            "location": "/management-api/advertising/#404-not-found_1", 
            "text": "", 
            "title": "404 Not found"
        }, 
        {
            "location": "/management-api/advertising/#headers_5", 
            "text": "Name  Type  Notes      X-Rate-Limit-Limit  integer  The number of allowed requests in the current period    X-Rate-Limit-Remaining  integer  The number of remaining requests in the current period    X-Rate-Limit-Reset  integer  The number of seconds left in the current period", 
            "title": "HEADERS"
        }, 
        {
            "location": "/management-api/advertising/#response-schema_9", 
            "text": "Name  Type      error  error    error.code  string    error.description  string     {\n   error : {\n     code : 404,\n     description :  Not Found, this resource was not found \n  }\n}", 
            "title": "Response schema"
        }, 
        {
            "location": "/management-api/advertising/#delete-an-advertising-schedule", 
            "text": "", 
            "title": "Delete an advertising schedule"
        }, 
        {
            "location": "/management-api/advertising/#delete", 
            "text": "/sites/{site_id}/advertising/schedules/{ad_schedule_id}/  Deletes an advertising schedule  Path Parameters     Name  Type  Required  Notes      site_id  string  YES  The unique 8 character identifier for the site.    ad_schedule_id  string  YES  The unique 8 character identifier for the ad schedule.", 
            "title": "DELETE"
        }, 
        {
            "location": "/management-api/advertising/#responses", 
            "text": "", 
            "title": "Responses"
        }, 
        {
            "location": "/management-api/advertising/#200-ok_3", 
            "text": "", 
            "title": "200 OK"
        }, 
        {
            "location": "/management-api/advertising/#403-forbidden_2", 
            "text": "", 
            "title": "403 Forbidden"
        }, 
        {
            "location": "/management-api/advertising/#headers_6", 
            "text": "Name  Type  Notes      X-Rate-Limit-Limit  integer  The number of allowed requests in the current period    X-Rate-Limit-Remaining  integer  The number of remaining requests in the current period    X-Rate-Limit-Reset  integer  The number of seconds left in the current period", 
            "title": "HEADERS"
        }, 
        {
            "location": "/management-api/advertising/#response-schema_10", 
            "text": "Name  Type      error  error    error.code  string    error.description  string     {\n   error : {\n     code : 403,\n     description :  Forbidden, this API token is not authorized to make this call \n  }\n}", 
            "title": "Response schema"
        }, 
        {
            "location": "/management-api/advertising/#404-not-found_2", 
            "text": "", 
            "title": "404 Not found"
        }, 
        {
            "location": "/management-api/advertising/#headers_7", 
            "text": "Name  Type  Notes      X-Rate-Limit-Limit  integer  The number of allowed requests in the current period    X-Rate-Limit-Remaining  integer  The number of remaining requests in the current period    X-Rate-Limit-Reset  integer  The number of seconds left in the current period", 
            "title": "HEADERS"
        }, 
        {
            "location": "/management-api/advertising/#response-schema_11", 
            "text": "Name  Type      error  error    error.code  string    error.description  string     {\n   error : {\n     code : 404,\n     description :  Not Found, this resource was not found \n  }\n}", 
            "title": "Response schema"
        }, 
        {
            "location": "/jw-showcase/web/jw-showcase-for-web/", 
            "text": "Getting Started with JW Showcase for Web\n\n\nJW Showcase is a sample application that leverages playlists from JW Platform to distribute your content across platforms. This guide will provide instructions for getting set up with our web app.\n\n\nFor advanced configuration and customization, we recommend cloning the JW Showcase source code within Github. Modifying the cloned source gives you greater control over the app framework and allows you to keep your Showcase app in sync with our source repository as we add new features and bug fixes. For instructions on basic configuration of the precompiled static app, see our \nSupport article\n.\n\n\nDownload the latest version\n\n\nClone the source code from: \nhttps://github.com/jwplayer/jw-showcase\n\n\nAfter cloning you\u2019ll need to install the following tools globally on your machine:\n\n\n$ gem install compass\n\n\n$ npm i grunt-cli -g\n\n\n$ npm i bower -g\n\n\nInstall project dependencies for Bower and Node:\n\n\ncd /path/to/showcase-source-code/\n\n\n$ npm install\n\n\nConfigure Your App\n\n\nOpen the JW Showcase source code in any text editor and navigate to the config.json file located in the \u201c\napp\n\u201d folder.\n\n\n\n\nHere you\u2019ll need to replace the sample \u201c\nplayer\n\u201d, \u201c\nfeaturedPlaylist\n\u201d, and \u201c\nplaylists\n\u201d with media ids from your library within the JW Player dashboard.\n\n\n{\n    \"player\": \"DTYxzkKG\",\n    \"theme\": \"light\",\n    \"siteName\": \"JW Showcase\",\n    \"description\": \"JW Showcase is an open-source, dynamically generated video website built around JW Player and JW Platform services. It enables you to easily publish your JW Player-hosted video content with no coding and minimal configuration.\",\n    \"bannerImage\": \"images/logo.png\",\n    \"footerText\": \"Powered by JW Player\",\n    \"backgroundColor\": \"\",\n    \"featuredPlaylist\": \"lrYLc95e\",\n    \"playlists\": [\n        \"WXu7kuaW\",\n        \"Q352cyuc\",\n        \"oR7ahO0J\"\n    ]\n}\n\n\n\nTo locate your player ID, navigate to \u201c\nTools\n\u201d under the \u201c\nPlayers\n\u201d section of the dashboard.\n\n\n\n\nSelect the player you wish to use for your app under \u201c\nCloud Hosted Player Libraries\n\u201d. The library URL for that player will contain your player ID.\n\n\n\n\nReplace the ID in the config.json file with your own, ie:\n\n\n\"player\": \"DTYxzkKG\",\n\n\n\nNext, to set your \u201c\nfeatured playlist\n\u201d and \u201c\nplaylists\n\u201d for the app, navigate to \u201c\nCurated\n\u201d under the \u201c\nPlaylists\n\u201d section of the dashboard.\n\n\n\n\nClick into any playlist you wish to feature in your app and grab the playlist ID from the top of the playlist detail page.\n\n\n\n\nReplace the \u201c\nfeaturedPlaylist\n\u201d and \u201c\nplaylists\n\u201d IDs in the config.json file, ie:\n\n\n\"featuredPlaylist\": \"lrYLc95e\",\n    \"playlists\": [\n        \"WXu7kuaW\",\n        \"Q352cyuc\",\n        \"oR7ahO0J\"\n    ]\n\n\n\nBranding Your App\n\n\nIn the config.json file, you can choose between a \u201c\nlight\n\u201d and \u201c\ndark\n\u201d theme option for the app to match your branding. You can also designate a site name, description, and footer text for your app.\n\n\n\"theme\": \"light\",\n\"siteName\": \"JW Showcase\",\n\"description\": \"JW Showcase is an open-source, dynamically generated video website built around JW Player and JW Platform services. It enables you to easily publish your JW Player-hosted video content with no coding and minimal configuration.\",\n\"bannerImage\": \"images/logo.png\",\n\"footerText\": \"Powered by JW Player\",\n\n\n\nTo use your own logo, simply replace the \u201clogo.png\u201d file in the \u201cimages\u201d folder with your own.\n\n\n\n\nAdvanced Customization\n\n\nCustom HTML\n\n\nThe JW Showcase app is built from \u201cviews\u201d located within the app folder of the project. Here you can modify the default HTML of the header and footer of the app. \n\n\n\n\nCustom CSS\n\n\nThe JW Showcase app uses SASS to compile a master css file from partial sass files located in \u201cstyles\u201d within the app folder of the project. Custom css can be added to the header.scss and footer.scss files located in the \u201ccomponents\u201d folder within \u201cstyles\u201d.\n\n\n\n\nBuilding Your App\n\n\nOnce your app has been configured, branded, and customized, re-compile the app by running:\n\n\ngrunt build\n\n\nTo launch your app locally, run the command:\n\n\ngrunt serve\n\n\nLaunching Your App\n\n\nAfter your app has been built and tested, you can use any FTP client (ie. Cyberduck) to upload only the files within the \u201cdist\u201d folder onto your own web server.", 
            "title": "JW Showcase for Web"
        }, 
        {
            "location": "/jw-showcase/web/jw-showcase-for-web/#getting-started-with-jw-showcase-for-web", 
            "text": "JW Showcase is a sample application that leverages playlists from JW Platform to distribute your content across platforms. This guide will provide instructions for getting set up with our web app.  For advanced configuration and customization, we recommend cloning the JW Showcase source code within Github. Modifying the cloned source gives you greater control over the app framework and allows you to keep your Showcase app in sync with our source repository as we add new features and bug fixes. For instructions on basic configuration of the precompiled static app, see our  Support article .", 
            "title": "Getting Started with JW Showcase for Web"
        }, 
        {
            "location": "/jw-showcase/web/jw-showcase-for-web/#download-the-latest-version", 
            "text": "Clone the source code from:  https://github.com/jwplayer/jw-showcase  After cloning you\u2019ll need to install the following tools globally on your machine:  $ gem install compass  $ npm i grunt-cli -g  $ npm i bower -g  Install project dependencies for Bower and Node:  cd /path/to/showcase-source-code/  $ npm install", 
            "title": "Download the latest version"
        }, 
        {
            "location": "/jw-showcase/web/jw-showcase-for-web/#configure-your-app", 
            "text": "Open the JW Showcase source code in any text editor and navigate to the config.json file located in the \u201c app \u201d folder.   Here you\u2019ll need to replace the sample \u201c player \u201d, \u201c featuredPlaylist \u201d, and \u201c playlists \u201d with media ids from your library within the JW Player dashboard.  {\n    \"player\": \"DTYxzkKG\",\n    \"theme\": \"light\",\n    \"siteName\": \"JW Showcase\",\n    \"description\": \"JW Showcase is an open-source, dynamically generated video website built around JW Player and JW Platform services. It enables you to easily publish your JW Player-hosted video content with no coding and minimal configuration.\",\n    \"bannerImage\": \"images/logo.png\",\n    \"footerText\": \"Powered by JW Player\",\n    \"backgroundColor\": \"\",\n    \"featuredPlaylist\": \"lrYLc95e\",\n    \"playlists\": [\n        \"WXu7kuaW\",\n        \"Q352cyuc\",\n        \"oR7ahO0J\"\n    ]\n}  To locate your player ID, navigate to \u201c Tools \u201d under the \u201c Players \u201d section of the dashboard.   Select the player you wish to use for your app under \u201c Cloud Hosted Player Libraries \u201d. The library URL for that player will contain your player ID.   Replace the ID in the config.json file with your own, ie:  \"player\": \"DTYxzkKG\",  Next, to set your \u201c featured playlist \u201d and \u201c playlists \u201d for the app, navigate to \u201c Curated \u201d under the \u201c Playlists \u201d section of the dashboard.   Click into any playlist you wish to feature in your app and grab the playlist ID from the top of the playlist detail page.   Replace the \u201c featuredPlaylist \u201d and \u201c playlists \u201d IDs in the config.json file, ie:  \"featuredPlaylist\": \"lrYLc95e\",\n    \"playlists\": [\n        \"WXu7kuaW\",\n        \"Q352cyuc\",\n        \"oR7ahO0J\"\n    ]", 
            "title": "Configure Your App"
        }, 
        {
            "location": "/jw-showcase/web/jw-showcase-for-web/#branding-your-app", 
            "text": "In the config.json file, you can choose between a \u201c light \u201d and \u201c dark \u201d theme option for the app to match your branding. You can also designate a site name, description, and footer text for your app.  \"theme\": \"light\",\n\"siteName\": \"JW Showcase\",\n\"description\": \"JW Showcase is an open-source, dynamically generated video website built around JW Player and JW Platform services. It enables you to easily publish your JW Player-hosted video content with no coding and minimal configuration.\",\n\"bannerImage\": \"images/logo.png\",\n\"footerText\": \"Powered by JW Player\",  To use your own logo, simply replace the \u201clogo.png\u201d file in the \u201cimages\u201d folder with your own.", 
            "title": "Branding Your App"
        }, 
        {
            "location": "/jw-showcase/web/jw-showcase-for-web/#advanced-customization", 
            "text": "", 
            "title": "Advanced Customization"
        }, 
        {
            "location": "/jw-showcase/web/jw-showcase-for-web/#custom-html", 
            "text": "The JW Showcase app is built from \u201cviews\u201d located within the app folder of the project. Here you can modify the default HTML of the header and footer of the app.", 
            "title": "Custom HTML"
        }, 
        {
            "location": "/jw-showcase/web/jw-showcase-for-web/#custom-css", 
            "text": "The JW Showcase app uses SASS to compile a master css file from partial sass files located in \u201cstyles\u201d within the app folder of the project. Custom css can be added to the header.scss and footer.scss files located in the \u201ccomponents\u201d folder within \u201cstyles\u201d.", 
            "title": "Custom CSS"
        }, 
        {
            "location": "/jw-showcase/web/jw-showcase-for-web/#building-your-app", 
            "text": "Once your app has been configured, branded, and customized, re-compile the app by running:  grunt build  To launch your app locally, run the command:  grunt serve", 
            "title": "Building Your App"
        }, 
        {
            "location": "/jw-showcase/web/jw-showcase-for-web/#launching-your-app", 
            "text": "After your app has been built and tested, you can use any FTP client (ie. Cyberduck) to upload only the files within the \u201cdist\u201d folder onto your own web server.", 
            "title": "Launching Your App"
        }, 
        {
            "location": "/jw-showcase/apple-tv/jw-showcase-for-apple-tv/", 
            "text": "Getting Started with JW Showcase for Apple TV\n\n\nJW Showcase is a sample application that leverages playlists from JW Platform to distribute your content across platforms. This guide will provide instructions for getting set up with our Apple TV app.\n\n\nTo get started, we recommend cloning the JW Showcase for Apple TV source code within Github. Modifying the cloned source gives you greater control over the app framework and allows you to keep your Showcase app in sync with our source repository as we add new features and bug fixes.\n\n\n!!!important\nThe JW Showcase for Apple TV app is only supported on 4th Generation (2015) Apple TV devices.\n!!!\n\n\nDownload the latest version\n\n\nClone the source code from: \nhttps://github.com/jwplayer/jw-showcase-appletv\n\n\nConfigure Your App\n\n\nWithin the \njwplayer-appletv-web-app/resources/configs\n folder, you'll need to rename the \nVCyJXbpY\n directory with your account API key.\n\n\n\n\nTo locate your account API key \nin the Dashboard\n, navigate to \"Properties\" under \"Account. Your API key can be copied from the \"\nAPI Credentials\n\" section.\n\n\n\n\nNext, open the config.json file in any text editor and replace the default playlist IDs with your own playlist IDs from your content library hosted in JW Platform.\n\n\n{\n  \"playlists\": [\n    \"K6Sl8yPJ\",\n    \"BXatQw7p\",\n    \"E12RS6r7\"\n  ],\n  \"featuredPlaylist\": \"1AxTdxJn\",\n\n\n\nNavigate to \u201c\nCurated\n\u201d under the \u201c\nPlaylists\n\u201d section of the dashboard.\n\n\n\n\nClick into any playlist you wish to feature in your app and grab the playlist ID from the top of the playlist detail page.\n\n\n\n\nBranding Your App\n\n\nIn the config.json file, you can set the background color of the app, using a hex value, to match your branding. \n\n\nbackgroundColor\n: \n#7e0023\n,\n\n\n\n\nThe config.json also looks for a \"\nsplashScreen\n\" and \"\nbannerImage\n\" that can be replaced with your own images in the same directory.\n\n\nsplashScreen\n: \nimages/jw-main.png\n,\n\nbannerImage\n: \nimages/jw-header.png\n,\n\n\n\n\n\n\n\n\n\n\nImage\n\n\nDescription\n\n\nRecommended Size\n\n\n\n\n\n\n\n\n\n\nsplashScreen\n\n\nShown while app is loading\n\n\n1920x1080\n\n\n\n\n\n\nbannerImage\n\n\nHeader image shown on app home screen\n\n\n1920x400\n\n\n\n\n\n\n\n\nXcode Configuration\n\n\n!!!important\nApple's developer tool, Xcode is required to configure JW Showcase for Apple TV\n!!!\n\n\nOpen the \njwplayer-appletv-tvos-app/jwplayer-for-tv.xcodeproj\n project in Xcode.\n\n\nOpen the \nAppDelegate.swift\n file and change the \"\nbaseURL\n\" variable to your web app server location.\n\n\n\n\nNext, open the Info.plist file and change the \"\njwplayer.account_key\n\" value to your account API key and the \"\nbundle name\n\" to your desired app name.\n\n\n\n\nLastly, open the \"Assets.xcassets\" bundle and replace the top shelf and default app icon assets with your own images. For image specs, see our \nAppleTV Branding Guidelines\n.\n\n\n\n\nBuilding Your App\n\n\nWe recommend running the app in the Xcode Apple TV emulator to test that everything is configured properly. After you've ensured that your app is configued properly, build your app.\n\n\nTo submit your app to the Apple App Store see \nPreparing Your tvOS App for Submission\n guidelines.\n\n\n!!!important\nAn Apple Developer license is required to submit your app to the Apple App Store.\n!!!", 
            "title": "JW Showcase for Apple TV"
        }, 
        {
            "location": "/jw-showcase/apple-tv/jw-showcase-for-apple-tv/#getting-started-with-jw-showcase-for-apple-tv", 
            "text": "JW Showcase is a sample application that leverages playlists from JW Platform to distribute your content across platforms. This guide will provide instructions for getting set up with our Apple TV app.  To get started, we recommend cloning the JW Showcase for Apple TV source code within Github. Modifying the cloned source gives you greater control over the app framework and allows you to keep your Showcase app in sync with our source repository as we add new features and bug fixes.  !!!important\nThe JW Showcase for Apple TV app is only supported on 4th Generation (2015) Apple TV devices.\n!!!", 
            "title": "Getting Started with JW Showcase for Apple TV"
        }, 
        {
            "location": "/jw-showcase/apple-tv/jw-showcase-for-apple-tv/#download-the-latest-version", 
            "text": "Clone the source code from:  https://github.com/jwplayer/jw-showcase-appletv", 
            "title": "Download the latest version"
        }, 
        {
            "location": "/jw-showcase/apple-tv/jw-showcase-for-apple-tv/#configure-your-app", 
            "text": "Within the  jwplayer-appletv-web-app/resources/configs  folder, you'll need to rename the  VCyJXbpY  directory with your account API key.   To locate your account API key  in the Dashboard , navigate to \"Properties\" under \"Account. Your API key can be copied from the \" API Credentials \" section.   Next, open the config.json file in any text editor and replace the default playlist IDs with your own playlist IDs from your content library hosted in JW Platform.  {\n  \"playlists\": [\n    \"K6Sl8yPJ\",\n    \"BXatQw7p\",\n    \"E12RS6r7\"\n  ],\n  \"featuredPlaylist\": \"1AxTdxJn\",  Navigate to \u201c Curated \u201d under the \u201c Playlists \u201d section of the dashboard.   Click into any playlist you wish to feature in your app and grab the playlist ID from the top of the playlist detail page.", 
            "title": "Configure Your App"
        }, 
        {
            "location": "/jw-showcase/apple-tv/jw-showcase-for-apple-tv/#branding-your-app", 
            "text": "In the config.json file, you can set the background color of the app, using a hex value, to match your branding.   backgroundColor :  #7e0023 ,  The config.json also looks for a \" splashScreen \" and \" bannerImage \" that can be replaced with your own images in the same directory.  splashScreen :  images/jw-main.png , bannerImage :  images/jw-header.png ,     Image  Description  Recommended Size      splashScreen  Shown while app is loading  1920x1080    bannerImage  Header image shown on app home screen  1920x400", 
            "title": "Branding Your App"
        }, 
        {
            "location": "/jw-showcase/apple-tv/jw-showcase-for-apple-tv/#xcode-configuration", 
            "text": "!!!important\nApple's developer tool, Xcode is required to configure JW Showcase for Apple TV\n!!!  Open the  jwplayer-appletv-tvos-app/jwplayer-for-tv.xcodeproj  project in Xcode.  Open the  AppDelegate.swift  file and change the \" baseURL \" variable to your web app server location.   Next, open the Info.plist file and change the \" jwplayer.account_key \" value to your account API key and the \" bundle name \" to your desired app name.   Lastly, open the \"Assets.xcassets\" bundle and replace the top shelf and default app icon assets with your own images. For image specs, see our  AppleTV Branding Guidelines .", 
            "title": "Xcode Configuration"
        }, 
        {
            "location": "/jw-showcase/apple-tv/jw-showcase-for-apple-tv/#building-your-app", 
            "text": "We recommend running the app in the Xcode Apple TV emulator to test that everything is configured properly. After you've ensured that your app is configued properly, build your app.  To submit your app to the Apple App Store see  Preparing Your tvOS App for Submission  guidelines.  !!!important\nAn Apple Developer license is required to submit your app to the Apple App Store.\n!!!", 
            "title": "Building Your App"
        }, 
        {
            "location": "/release-notes/", 
            "text": "JW Platform Release Notes\n\n\n\n\n\n2017-05-01\n\n\nNew Features\n\n\n\n\nJW Live is now included for all high volume hosting and streaming enterprise accounts\n\n\n\n\nUpdated Features\n\n\n\n\nPlayer pre-roll ad tags have been automatically migrated to advertising schedules which provide additional analytics capabilities.\n\n\n\n\nBug Fixes\n\n\n\n\nSafari users can now upload tracks via the dashboard\n\n\nFixed an issue related to uploading videos with 4-byte Unicode in the filename.\n\n\n\n\n2017-04-27\n\n\nNew Features\n\n\n\n\nIt is now possible to upload text tracks for externally hosted media.\n\n\n\n\nUpdated Features\n\n\n\n\nBulk segmentation queries. Uers can now select one or multiple players from the Players List page to explore analytics for their selected player(s). This enables comparing performance across multiple players for customers with the Advanced Analytics entitlement\n\n\n\n\n2017-04-13\n\n\nNew Features\n\n\n\n\nStatic RTMP endpoints for JW Live. JW live streams are now restartable (aka \"static RTMP entry point URL\"), which means that you can restart your live stream without having to reconfigure your encoder or re-embed a new player embed code each time you broadcast. \n\n\n\n\n2017-03-29\n\n\nUpdated Features\n\n\n\n\nThe default \nmax_videos\n on creation for Similar playlists is now 25. This fully populates three pages of video recommendations on the player.\n\n\n\n\nBug Fixes\n\n\n\n\nThe Management API now returns a 400 response for videos/conversions/create requests when the original is not available.\n\n\n\n\n2017-03-28\n\n\nNew Features\n\n\n\n\nImproved analytics segmentation with new metrics and dimensions. Full details are available \nhere\n.\n\n\nNew metrics including: Ad Requests (beta), Ad Clicks (beta), Ad Skips (beta), Ad Completes (beta), Fill Rate (impressions / requests) (beta), Unique viewers, Quartile 1 plays (25% complete), Quartile 2 plays (50% complete), Quartile 3 plays (75% complete), Complete rate (completes / plays), Time watched per viewer (time watched / unique viewers), Ad Impressions per viewer (ad impressions / unique viewers), Video plays per viewer (plays / unique viewers)\n\n\nNew Dimensions including: Ad Schedule ID, Page URL (query strings are trimmed), Region, City\n\n\nNote: The new (beta) advertising metrics require using platform hosted ad schedules with single line embed platform players\n\n\n\n\n\n\n\n\n2017-03-22\n\n\nUpdated Features\n\n\n\n\nThe production channel of cloud hosted players now uses JW Player 7.10.1. This update includes:\n\n\nDASH Updates\n\n\nAdded support for DVR, multiple audio tracks and custom quality labels\n\n\nAdded bitrate to quality labels to differentiate between levels with the same height but different bitrate\n\n\nAdded ability to display language with captions and audio tracks\n\n\n\n\n\n\nLive Streaming\n\n\nImproved handling of Live stream completion by showing the end state\n\n\nGeneral improvements to HLS and Dash streaming\n\n\n\n\n\n\nViewability\n\n\nAdded viewability data to player API events\n\n\nAdded a getViewable() method which returns 1 when 50% or more of the player is visible and 0 otherwise\n\n\nAdded a config option - \"autostart\": \"viewable\" - for starting playback on desktop devices when the player is viewable\n\n\n\n\n\n\nUI\n\n\nAdded a config option - \u201cnextUpDisplay\u201d: false - to disable the \u201cNext Up\u201d tooltip\n\n\nAdded support for timeslider thumbstrips on mobile\n\n\nImproved default styling of captions\n\n\n\n\n\n\nGeneral Updates\n\n\nImproved handling of VMAP breakstart/breakend events\n\n\nAdded support for muted autoplay on Chrome in iOS\n\n\nSeveral Bug Fixes\n\n\n\n\n\n\nFull release notes are available \nhere\n.\n\n\n\n\n\n\n\n\n2017-03-20\n\n\nNew Features\n\n\n\n\nBulk segmentation queries in the dashboard. Users can now select a subset of videos from the Video List page and launch a segmentation query to view detailed analytics for the videos of interest (for customers with the Advanced Analytics entitlement). This is surfaced through the \u201cExplore Analytics\u201d bulk action button that appears at the top when more than one video is selected. \n\n\n\n\nUpdated Features\n\n\n\n\nImproved token signing user experience. For properties with content signing turned on we\u2019ve added a countdown and additional messaging to prevent confusion and allow technical users to test and experiment with links in the dashboard with the right expectations.\n\n\n\n\nBug Fixes\n\n\n\n\nAdded parameter to platform hosted HLS manifests to avoid unknown captions notice on Safari.\n\n\n\n\n2017-03-02\n\n\nNew Features\n\n\n\n\nDelivery API\n v2 is now available on for \n/v2/media/\n and \n/v2/playlists/\n. These endpoints provide JSON or RSS responses for individual media items and playlists including all media items.\n\n\nThese endpoints have additional request-time parameters including poster image width and pagination. More parameters will be available soon. An interactive API reference is available \nhere\n.\n\n\n/v2/ endpoints use \nstandards based\n JWT \nurl signing\n if content protection is enabled.\n\n\nJSON playlist responses include a pagination \n\"links\":\n parameter to iterate through videos beyond the first set returned.\n\n\n\n\n\n\n\n\n2017-02-02\n\n\nUpdated Features\n\n\n\n\nThe production channel of cloud hosted players now uses JW Player 7.9. This update includes:\n\n\nImproved usability of controls at small player sizes and on touch devices\n\n\nAdded a configuration - \"timeSliderAbove\"\n\n\nUpdated Casting to connect to the default receiver application hosted by Google\n\n\nAdded AirPlay support\n\n\nAdded configuration option \"vpaidcontrols: true\"\n\n\nAdded support for Azure's PlayReady AES functionality\n\n\nSeveral bug fixes\n\n\nFull release notes are available \nhere\n.\n\n\n\n\n\n\n\n\n2017-02-01\n\n\nBug Fixes\n\n\n\n\nFixed horizontal alignment for preview players using a fixed width player setting.\n\n\n\n\n2017-01-05\n\n\nUpdated Features\n\n\n\n\nAd impressions are now available as a metric in analytics. Users with advanced analytics can segment and filter ad impressions against dimensions of Media, Player, Feed, Device, Domain, Country, and/or Platform.\n\n\n\n\n2016-12-14\n\n\nUpdated Features\n\n\n\n\nAdded a new video attribute, \nupdated\n (a unix timestamp for when the video was last updated), in the JW Platform API. \n/videos/list\n calls can \norder_by\n (\nupdated:desc\n or \nupdated:asc\n) or filtered by the \nupdated_after\n parameter.\n\n\nThe attribute is updated whenever:\n\n\nMedia metadata gets changed (title, description, author, etc.)\n\n\nTags get added or removed from the media\n\n\nCustom parameters are added, removed or values are changed.\n\n\nWhen a tag is globally deleted (via the dashboard or \n/accounts/tags/delete/\n) all media associated with that tag get a new updated value\n\n\nCertain back-end processes (ex: transcoding operations) put a new value in the updated attribute although these updates may not have any user noticeable changes     reflected in the API output other than the new updated value.\n\n\n\n\n\n\nKnown Limitations (on our radar for a future update):\n\n\nAt this time, if you change the name of an existing tag using the dashboard or \n/accounts/tags/update\n; associated media does not get a new updated value.\n\n\nAdding or updating tracks associated with the media does not yet trigger an update of the associated media.\n\n\n\n\n\n\n\n\n\n\n\n\n2016-12-13\n\n\nUpdated Features\n\n\n\n\nPer item data driven recommendations are now available for content with \nURL token signing\n enforcement enabled.\n\n\n\n\n2016-12-12\n\n\nNew Features\n\n\n\n\nVideo trimming. It is now possible to trim videos to exclude portions from the beginning and/or end of a video. This can be done on the video details page of the dashboard or via the API.\n\n\nAutoplay ads muted. Cloud hosted JW7 players can now include the configuration option to enable autoplay of muted ads on mobile. This can be done on the players details page under playback options.\n\n\nAdditional simulcast of live streams. Users can now enter in server key and stream URLs on the live stream creation page, to simulcast their live streams to Youtube, Facebook and Twitch. Configuring simulcast targets must be done at live stream creation time.\n\n\n\n\n2016-12-09\n\n\nUpdated Features\n\n\n\n\nUpdated \nAMP\n behavior to handle explicit play/pause events.\n\n\nUpdated the content API \nrobots.txt\n to disallow only links to /previews/* this enables strong SEO of hosted content. Users desiring to avoid indexing can use the \n/previews/\n players on their site whereas most users will want to use \n/players/\n single line embeds.\n\n\n\n\nBug Fixes\n\n\n\n\nFixed rare but incorrect not allowed responses to geo-restricted content being accessed from users in allowed counties.\n\n\n\n\n2016-11-30\n\n\nNew Features\n\n\n\n\nDesignate videos as 360 content. You can now designate a video as 360 including the stereoscopic mode from the video detail page or by adding the custom parameter \ncustom.stereomode\n with a value of \nmonoscopic\n, \nstereoscopicTopBottom\n or\nstereoscopicLeftRight\n. This will tell the player to use 360 rendering with the appropriate 3D mode. 360 formatted videos can be uploaded, transcoded and served just like standard videos.\n\n\n\n\nUpdated Features\n\n\n\n\nThe production channel of cloud hosted players now uses JW Player 7.8. This update includes:\n\n\nAdds failover support to load the player via HTML5 when Flash is chosen as the primary setting but is blocked or not available.\n\n\nAdded support for inline autoplay while muted on iOS and Android\n\n\nBuilt in FreeWheel Ad Manager for HTML5\n\n\nUpdated player design responsiveness for improved usability at smaller player sizes\n\n\nFull release notes are available \nhere\n.\n\n\n\n\n\n\nSharing embed codes in JW Platform single line embeds use protocol relative URLS for sharing over http or https with the same code.\n\n\n\n\n2016-11-15\n\n\nUpdated Features\n\n\n\n\nUpdated Facebook OpenGraph sharing mechanism to avoid the use of Flash.\n\n\n\n\n2016-11-01\n\n\nNew Features\n\n\n\n\nStreaming limit emails to account admins. Premium, platinum, and ads/enterprise accounts without custom streaming limits now receive email notifications when they have reached 50%, 75% and 100% of their monthly GB streaming. The email is sent to all admin users associated with the account.\n\n\n\n\nUpdated Features\n\n\n\n\nLive streaming has exited limited beta and is now in general availability for entitled accounts.\n\n\nLive streaming is available on both http and https.\n\n\n\n\n2016-10-18\n\n\nNew Features\n\n\n\n\nSearch feeds can now be created in the dashboard under the recommended playlists section.\n\n\n\n\nUpdated Features\n\n\n\n\nA new video details page design:\n\n\nIncludes the video preview on the detail page\n\n\nAllows for editing of external URL duration\n\n\nLinking to the video's analytics details\n\n\n\n\n\n\n\n\n2016-10-04\n\n\nNew Features\n\n\n\n\nUsers with non-custom Ad Impressions limits will now receive email notifications as they approach their limits at 50%, 75% and 100% of the allotted impressions served. The email is sent to account admin level users who can unsubscribe if desired.\n\n\n\n\nUpdated Features\n\n\n\n\nThe production channel of cloud hosted players now uses JW Player 7.7. This update includes:\n\n\nNew controlbar, playlist and feeds UI\n\n\nHTML5 HLS in Firefox\n\n\nImproved performance in Google IMA\n\n\nBetter DASH support and performance with Shaka 2.0\n\n\nFull release notes are available \nhere\n.\n\n\n\n\n\n\n\n\n2016-09-28\n\n\nUpdated Features\n\n\n\n\nIncreased API rate limits. The JW Platform API now allows users up to 60 API calls per minute. Calls that exceed this rate will result in a 429 Rate Limit Exceeded error and will not be executed. Note that calls to cdn.jwplayer.com do not count towards the API rate limit.\n\n\n\n\n2016-09-21\n\n\nNew Features\n\n\n\n\nSearch feeds allow you to build widgets or tools on your site where users can use textual search to find videos in your library. You can now \ncreate\n a search type feed and \nserve it\n like other data driven feeds from our content service.\n\n\n\n\n2016-09-13\n\n\nUpdated Features\n\n\n\n\nThe related items overlay now populates with recommendations from our data driven feeds feature. The recommendations update with each item playing in the player and can be served on properties with content URL signing enforced.\n\n\nAdditionally, you can choose which related feed to use for each player. This allows publishers to recommend only videos that match tag based rules.\n\n\n\n\n2016-09-08\n\n\nNew Features\n\n\n\n\nThe JW Live private beta has now launched! You can now broadcast a live stream directly from JW Platform via our new JW Live feature. See the \ndocumentation\n on JW Live to see a detailed description of how to setup a live stream. NOTE: You must be invited to the private beta to get access. Contact sales@jwplayer.com to request access.\n\n\n\n\n2016-08-29\n\n\nNew Features\n\n\n\n\nAnalytics segmentation is now available to enterprise users with advanced analytics. This allows for filtering and segmenting analytics based on dimensions like media, player, feed, device, domain, country, and distribution platform. More information is available on our \nblog\n.\n\n\n\n\n2016-08-15\n\n\nUpdated Features\n\n\n\n\nThe production channel of cloud hosted players now uses JW Player 7.6. This update improves the user experience when displaying related and recommended content. It also includes Google IMA advertising improvements. Full release notes are available \nhere\n.\n\n\n\n\n2016-08-02\n\n\nNew Features\n\n\n\n\nA new \npython API kit\n is available for JW Platform integration. This API kit supports both python 2 and 3 and is available via \npip install jwplatform\n.\n\n\n\n\n2016-07-28\n\n\nUpdated Features\n\n\n\n\nImproved transcoding support for interlaced originals.\n\n\n\n\n2016-07-26\n\n\nUpdated Features\n\n\n\n\nThe production channel of cloud hosted players now uses JW Player 7.5. This adds DRM compatibility for two additional browsers (Firefox and Safari Desktop) as well as improvements to captions positioning, handling, and styling. Aria integration improves accessibility by adding support for screen readers. Finally, we've exposed additional tracking information via our API, and made VMAP ad scheduling more robust. Full release notes are available \nhere\n.\n\n\n\n\n2016-07-25\n\n\nUpdated Features\n\n\n\n\nUpdated opengraph url tag to use the same player key as the iframe player including it.\n\n\n\n\nBug Fixes\n\n\n\n\nFixed issue in accessing tracks that were uploaded without an extension.\n\n\n\n\n2016-07-20\n\n\nBug Fixes\n\n\n\n\nData driven feeds properly support OPTIONS requests with CORS headers.\n\n\n\n\n2016-07-18\n\n\nNew Features\n\n\n\n\nThe JW Platform Dashboard now offers new roles for read-only users and content editors more information is available on our \nblog post\n.\n\n\n\n\n2016-07-05\n\n\nNew Features\n\n\n\n\nWe are pleased to offer a new Platinum Edition of JW Player that includes a basic allotment of advertising impressions and increased hosting and streaming limits over the Premium Edition. Get started \nhere\n.\n\n\n\n\n2016-06-30\n\n\nUpdated Features\n\n\n\n\nAll content now has a 1920px wide poster image available. It is accessible in the \nsame way\n as other poster images. \n\n\n\n\n2016-06-14\n\n\nNew Features\n\n\n\n\nData-driven similar and trending feeds now support content signing using JSON Web Tokens. More details are available \nhere\n.\n\n\n\n\n2016-06-06\n\n\nUpdated Features\n\n\n\n\nSingle line player embeds can now use a trending feed_id as a key to include trending content directly in a player as a playlist.\n\n\n\n\n2016-05-31\n\n\nNew Features\n\n\n\n\nData-driven similar and trending feeds are now available in json format. More details are available \nhere\n.\n\n\n\n\n2016-05-23\n\n\nNew Features\n\n\n\n\nEnterprise Edition accounts can now configure and serve advertising schedules.\n\n\nAdded API rate limiting information to API responses.\n\n\n\n\nUpdated Features\n\n\n\n\nThe no-index metatag has been removed from iframe players to improve search engine indexing.\n\n\n\n\nBug Fixes\n\n\n\n\nFix ensures that deleted ad tags not served even if an ad break is configured to use them.\n\n\n\n\n2016-05-10\n\n\nUpdated Features\n\n\n\n\nIt is possible to create \nsourcetype: url\n videos with \nsourceformat: mpd\n allowing externally hosted DASH manifests to be served with JW Player single line embeds. \n\n\nAdjusted cache control headers on the content service to allow an individual browser to use the same download for longer, this should reduce delivery costs on looping videos.\n\n\n\n\nBug Fixes\n\n\n\n\nWe removed the spaces (now there are only commas) between tags in JW7 single line embeds and json feeds. This allows for using the \n__item-tags__\n macro directly with DFP for Google IMA Ad Tags.\n\n\n\n\n2016-05-04\n\n\nNew Features\n\n\n\n\nDashboard uploads now take advantage of S3 Accelerated Transfer.\n\n\n\n\n2016-04-26\n\n\nNew Features\n\n\n\n\nTrending type feeds are now supported in JW Platform single line embeds.\n\n\n\n\nUpdated Features\n\n\n\n\nJW Player 7.4.0 was released to the staging channel. Full release notes are available \nhere\n. Of particular interest to platform embeds, the new version includes:\n\n\nSupport for HLS in HTML5. Cloud hosted players can take advantage of this by setting \n\"primary\":\"html5\"\n or omitting the \nprimary\n property of the player.\n\n\nUpdated support for VP9-DASH to check for VP9 support in the browser before chosing the DASH source. This allows browers like Edge to fall back to HLS until they support VP9 rendering.\n\n\nGoogle IMA ad tags will automatically get duration and video title added to the request url for more enhanced ad targeting.\n\n\n\n\n\n\nJSON feeds\n now include VP9-DASH sources and restructured custom parameters to align with the behavior of single line embeds. \n\n\n\n\nBug Fixes\n\n\n\n\nVertical video with a non-zero rotation parameter served by JW Platform now renders properly in all devices without stretching.\n\n\nCloud hosted related plugins support zero second autoplay countdown to allow the player to immediately proceed into the first related video upon completion.\n\n\n\n\n2016-04-18\n\n\nNew Features\n\n\n\n\nTrending Playlists and Similar Video Feeds \nBETA Preview\n. With a special account entitlement, JW Platform now supports two new varieties of Data-Driven Recommendations access. Trending Playlists are dynamically generated based on recently trending videos. Similar Video Feeds allow are dynamically populated with media having similar content metadata. The new functionality is configurable through the \n/channels\n API endpoint and is served through a new \n/feed.rss\n content service endpoint.\n\n\nVideo Sunset. Videos can be configured to expire at a predetermined date and time. After their \nexpires_date\n, videos will no longer show up in playlists and subsequent requests for videos will not be allowed. The \nexpires_date\n can be specified in the \ndashboard\n or through the API during \ncreation\n or as an \nupdate\n to a video.\n\n\n\n\nUpdated Features\n\n\n\n\nDashboard redesign. The JW Player Dashboard has been updated to simplify and give quick access to popular features through an updated left navigation panel and redesigned account section.\n\n\n\n\n2016-03-31\n\n\nNew Features\n\n\n\n\nSupport for VP9 transcoding and adaptive streaming of VP9 conversions using DASH. This feature requires a separate account entitlement and is only open to users in a limited pilot at this time.\n\n\n\n\nUpdated Features\n\n\n\n\nJW7 single-line embed performance enhancement. Embeds of JW Player version 7 now include media links. This means faster player setup and time to first frame. It also means that free edition player will be able to take advantage of the various quality transcodes created by JW Platform.\n\n\n\n\nBug Fixes\n\n\n\n\nCustom skins with JW7. This release allows the inclusion of the skin name with custom css skins for JW7 players. Using custom skins for JW7 requires matching the skin name with the jw-skin-\n string in the css.\n\n\nFixed an issue with URL tokenization where iframe single-line embeds that were correctly signed were failing signature validation.\n\n\n\n\n2016-03-21\n\n\nUpdated Features\n\n\n\n\nUpdated JW7 iframe embeds to listen for play and pause events on the iframe and pass them to the contained player.\n\n\n\n\n2016-03-03 Upload to s3\n\n\nNew Features\n\n\n\n\nUpload videos directly to the cloud!\n JW Platform now supports video uploads (up to 5GB) directly to s3. s3 uploads take advantage of global cloud infrastructure including edge services to achieve the fastest and most reliable uploads globally. Details available \nhere\n.", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-notes/#jw-platform-release-notes", 
            "text": "", 
            "title": "JW Platform Release Notes"
        }, 
        {
            "location": "/release-notes/#2017-05-01", 
            "text": "", 
            "title": "2017-05-01"
        }, 
        {
            "location": "/release-notes/#new-features", 
            "text": "JW Live is now included for all high volume hosting and streaming enterprise accounts", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#updated-features", 
            "text": "Player pre-roll ad tags have been automatically migrated to advertising schedules which provide additional analytics capabilities.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#bug-fixes", 
            "text": "Safari users can now upload tracks via the dashboard  Fixed an issue related to uploading videos with 4-byte Unicode in the filename.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/#2017-04-27", 
            "text": "", 
            "title": "2017-04-27"
        }, 
        {
            "location": "/release-notes/#new-features_1", 
            "text": "It is now possible to upload text tracks for externally hosted media.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#updated-features_1", 
            "text": "Bulk segmentation queries. Uers can now select one or multiple players from the Players List page to explore analytics for their selected player(s). This enables comparing performance across multiple players for customers with the Advanced Analytics entitlement", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2017-04-13", 
            "text": "", 
            "title": "2017-04-13"
        }, 
        {
            "location": "/release-notes/#new-features_2", 
            "text": "Static RTMP endpoints for JW Live. JW live streams are now restartable (aka \"static RTMP entry point URL\"), which means that you can restart your live stream without having to reconfigure your encoder or re-embed a new player embed code each time you broadcast.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2017-03-29", 
            "text": "", 
            "title": "2017-03-29"
        }, 
        {
            "location": "/release-notes/#updated-features_2", 
            "text": "The default  max_videos  on creation for Similar playlists is now 25. This fully populates three pages of video recommendations on the player.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#bug-fixes_1", 
            "text": "The Management API now returns a 400 response for videos/conversions/create requests when the original is not available.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/#2017-03-28", 
            "text": "", 
            "title": "2017-03-28"
        }, 
        {
            "location": "/release-notes/#new-features_3", 
            "text": "Improved analytics segmentation with new metrics and dimensions. Full details are available  here .  New metrics including: Ad Requests (beta), Ad Clicks (beta), Ad Skips (beta), Ad Completes (beta), Fill Rate (impressions / requests) (beta), Unique viewers, Quartile 1 plays (25% complete), Quartile 2 plays (50% complete), Quartile 3 plays (75% complete), Complete rate (completes / plays), Time watched per viewer (time watched / unique viewers), Ad Impressions per viewer (ad impressions / unique viewers), Video plays per viewer (plays / unique viewers)  New Dimensions including: Ad Schedule ID, Page URL (query strings are trimmed), Region, City  Note: The new (beta) advertising metrics require using platform hosted ad schedules with single line embed platform players", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2017-03-22", 
            "text": "", 
            "title": "2017-03-22"
        }, 
        {
            "location": "/release-notes/#updated-features_3", 
            "text": "The production channel of cloud hosted players now uses JW Player 7.10.1. This update includes:  DASH Updates  Added support for DVR, multiple audio tracks and custom quality labels  Added bitrate to quality labels to differentiate between levels with the same height but different bitrate  Added ability to display language with captions and audio tracks    Live Streaming  Improved handling of Live stream completion by showing the end state  General improvements to HLS and Dash streaming    Viewability  Added viewability data to player API events  Added a getViewable() method which returns 1 when 50% or more of the player is visible and 0 otherwise  Added a config option - \"autostart\": \"viewable\" - for starting playback on desktop devices when the player is viewable    UI  Added a config option - \u201cnextUpDisplay\u201d: false - to disable the \u201cNext Up\u201d tooltip  Added support for timeslider thumbstrips on mobile  Improved default styling of captions    General Updates  Improved handling of VMAP breakstart/breakend events  Added support for muted autoplay on Chrome in iOS  Several Bug Fixes    Full release notes are available  here .", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2017-03-20", 
            "text": "", 
            "title": "2017-03-20"
        }, 
        {
            "location": "/release-notes/#new-features_4", 
            "text": "Bulk segmentation queries in the dashboard. Users can now select a subset of videos from the Video List page and launch a segmentation query to view detailed analytics for the videos of interest (for customers with the Advanced Analytics entitlement). This is surfaced through the \u201cExplore Analytics\u201d bulk action button that appears at the top when more than one video is selected.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#updated-features_4", 
            "text": "Improved token signing user experience. For properties with content signing turned on we\u2019ve added a countdown and additional messaging to prevent confusion and allow technical users to test and experiment with links in the dashboard with the right expectations.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#bug-fixes_2", 
            "text": "Added parameter to platform hosted HLS manifests to avoid unknown captions notice on Safari.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/#2017-03-02", 
            "text": "", 
            "title": "2017-03-02"
        }, 
        {
            "location": "/release-notes/#new-features_5", 
            "text": "Delivery API  v2 is now available on for  /v2/media/  and  /v2/playlists/ . These endpoints provide JSON or RSS responses for individual media items and playlists including all media items.  These endpoints have additional request-time parameters including poster image width and pagination. More parameters will be available soon. An interactive API reference is available  here .  /v2/ endpoints use  standards based  JWT  url signing  if content protection is enabled.  JSON playlist responses include a pagination  \"links\":  parameter to iterate through videos beyond the first set returned.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2017-02-02", 
            "text": "", 
            "title": "2017-02-02"
        }, 
        {
            "location": "/release-notes/#updated-features_5", 
            "text": "The production channel of cloud hosted players now uses JW Player 7.9. This update includes:  Improved usability of controls at small player sizes and on touch devices  Added a configuration - \"timeSliderAbove\"  Updated Casting to connect to the default receiver application hosted by Google  Added AirPlay support  Added configuration option \"vpaidcontrols: true\"  Added support for Azure's PlayReady AES functionality  Several bug fixes  Full release notes are available  here .", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2017-02-01", 
            "text": "", 
            "title": "2017-02-01"
        }, 
        {
            "location": "/release-notes/#bug-fixes_3", 
            "text": "Fixed horizontal alignment for preview players using a fixed width player setting.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/#2017-01-05", 
            "text": "", 
            "title": "2017-01-05"
        }, 
        {
            "location": "/release-notes/#updated-features_6", 
            "text": "Ad impressions are now available as a metric in analytics. Users with advanced analytics can segment and filter ad impressions against dimensions of Media, Player, Feed, Device, Domain, Country, and/or Platform.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-12-14", 
            "text": "", 
            "title": "2016-12-14"
        }, 
        {
            "location": "/release-notes/#updated-features_7", 
            "text": "Added a new video attribute,  updated  (a unix timestamp for when the video was last updated), in the JW Platform API.  /videos/list  calls can  order_by  ( updated:desc  or  updated:asc ) or filtered by the  updated_after  parameter.  The attribute is updated whenever:  Media metadata gets changed (title, description, author, etc.)  Tags get added or removed from the media  Custom parameters are added, removed or values are changed.  When a tag is globally deleted (via the dashboard or  /accounts/tags/delete/ ) all media associated with that tag get a new updated value  Certain back-end processes (ex: transcoding operations) put a new value in the updated attribute although these updates may not have any user noticeable changes     reflected in the API output other than the new updated value.    Known Limitations (on our radar for a future update):  At this time, if you change the name of an existing tag using the dashboard or  /accounts/tags/update ; associated media does not get a new updated value.  Adding or updating tracks associated with the media does not yet trigger an update of the associated media.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-12-13", 
            "text": "", 
            "title": "2016-12-13"
        }, 
        {
            "location": "/release-notes/#updated-features_8", 
            "text": "Per item data driven recommendations are now available for content with  URL token signing  enforcement enabled.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-12-12", 
            "text": "", 
            "title": "2016-12-12"
        }, 
        {
            "location": "/release-notes/#new-features_6", 
            "text": "Video trimming. It is now possible to trim videos to exclude portions from the beginning and/or end of a video. This can be done on the video details page of the dashboard or via the API.  Autoplay ads muted. Cloud hosted JW7 players can now include the configuration option to enable autoplay of muted ads on mobile. This can be done on the players details page under playback options.  Additional simulcast of live streams. Users can now enter in server key and stream URLs on the live stream creation page, to simulcast their live streams to Youtube, Facebook and Twitch. Configuring simulcast targets must be done at live stream creation time.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2016-12-09", 
            "text": "", 
            "title": "2016-12-09"
        }, 
        {
            "location": "/release-notes/#updated-features_9", 
            "text": "Updated  AMP  behavior to handle explicit play/pause events.  Updated the content API  robots.txt  to disallow only links to /previews/* this enables strong SEO of hosted content. Users desiring to avoid indexing can use the  /previews/  players on their site whereas most users will want to use  /players/  single line embeds.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#bug-fixes_4", 
            "text": "Fixed rare but incorrect not allowed responses to geo-restricted content being accessed from users in allowed counties.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/#2016-11-30", 
            "text": "", 
            "title": "2016-11-30"
        }, 
        {
            "location": "/release-notes/#new-features_7", 
            "text": "Designate videos as 360 content. You can now designate a video as 360 including the stereoscopic mode from the video detail page or by adding the custom parameter  custom.stereomode  with a value of  monoscopic ,  stereoscopicTopBottom  or stereoscopicLeftRight . This will tell the player to use 360 rendering with the appropriate 3D mode. 360 formatted videos can be uploaded, transcoded and served just like standard videos.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#updated-features_10", 
            "text": "The production channel of cloud hosted players now uses JW Player 7.8. This update includes:  Adds failover support to load the player via HTML5 when Flash is chosen as the primary setting but is blocked or not available.  Added support for inline autoplay while muted on iOS and Android  Built in FreeWheel Ad Manager for HTML5  Updated player design responsiveness for improved usability at smaller player sizes  Full release notes are available  here .    Sharing embed codes in JW Platform single line embeds use protocol relative URLS for sharing over http or https with the same code.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-11-15", 
            "text": "", 
            "title": "2016-11-15"
        }, 
        {
            "location": "/release-notes/#updated-features_11", 
            "text": "Updated Facebook OpenGraph sharing mechanism to avoid the use of Flash.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-11-01", 
            "text": "", 
            "title": "2016-11-01"
        }, 
        {
            "location": "/release-notes/#new-features_8", 
            "text": "Streaming limit emails to account admins. Premium, platinum, and ads/enterprise accounts without custom streaming limits now receive email notifications when they have reached 50%, 75% and 100% of their monthly GB streaming. The email is sent to all admin users associated with the account.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#updated-features_12", 
            "text": "Live streaming has exited limited beta and is now in general availability for entitled accounts.  Live streaming is available on both http and https.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-10-18", 
            "text": "", 
            "title": "2016-10-18"
        }, 
        {
            "location": "/release-notes/#new-features_9", 
            "text": "Search feeds can now be created in the dashboard under the recommended playlists section.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#updated-features_13", 
            "text": "A new video details page design:  Includes the video preview on the detail page  Allows for editing of external URL duration  Linking to the video's analytics details", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-10-04", 
            "text": "", 
            "title": "2016-10-04"
        }, 
        {
            "location": "/release-notes/#new-features_10", 
            "text": "Users with non-custom Ad Impressions limits will now receive email notifications as they approach their limits at 50%, 75% and 100% of the allotted impressions served. The email is sent to account admin level users who can unsubscribe if desired.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#updated-features_14", 
            "text": "The production channel of cloud hosted players now uses JW Player 7.7. This update includes:  New controlbar, playlist and feeds UI  HTML5 HLS in Firefox  Improved performance in Google IMA  Better DASH support and performance with Shaka 2.0  Full release notes are available  here .", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-09-28", 
            "text": "", 
            "title": "2016-09-28"
        }, 
        {
            "location": "/release-notes/#updated-features_15", 
            "text": "Increased API rate limits. The JW Platform API now allows users up to 60 API calls per minute. Calls that exceed this rate will result in a 429 Rate Limit Exceeded error and will not be executed. Note that calls to cdn.jwplayer.com do not count towards the API rate limit.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-09-21", 
            "text": "", 
            "title": "2016-09-21"
        }, 
        {
            "location": "/release-notes/#new-features_11", 
            "text": "Search feeds allow you to build widgets or tools on your site where users can use textual search to find videos in your library. You can now  create  a search type feed and  serve it  like other data driven feeds from our content service.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2016-09-13", 
            "text": "", 
            "title": "2016-09-13"
        }, 
        {
            "location": "/release-notes/#updated-features_16", 
            "text": "The related items overlay now populates with recommendations from our data driven feeds feature. The recommendations update with each item playing in the player and can be served on properties with content URL signing enforced.  Additionally, you can choose which related feed to use for each player. This allows publishers to recommend only videos that match tag based rules.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-09-08", 
            "text": "", 
            "title": "2016-09-08"
        }, 
        {
            "location": "/release-notes/#new-features_12", 
            "text": "The JW Live private beta has now launched! You can now broadcast a live stream directly from JW Platform via our new JW Live feature. See the  documentation  on JW Live to see a detailed description of how to setup a live stream. NOTE: You must be invited to the private beta to get access. Contact sales@jwplayer.com to request access.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2016-08-29", 
            "text": "", 
            "title": "2016-08-29"
        }, 
        {
            "location": "/release-notes/#new-features_13", 
            "text": "Analytics segmentation is now available to enterprise users with advanced analytics. This allows for filtering and segmenting analytics based on dimensions like media, player, feed, device, domain, country, and distribution platform. More information is available on our  blog .", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2016-08-15", 
            "text": "", 
            "title": "2016-08-15"
        }, 
        {
            "location": "/release-notes/#updated-features_17", 
            "text": "The production channel of cloud hosted players now uses JW Player 7.6. This update improves the user experience when displaying related and recommended content. It also includes Google IMA advertising improvements. Full release notes are available  here .", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-08-02", 
            "text": "", 
            "title": "2016-08-02"
        }, 
        {
            "location": "/release-notes/#new-features_14", 
            "text": "A new  python API kit  is available for JW Platform integration. This API kit supports both python 2 and 3 and is available via  pip install jwplatform .", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2016-07-28", 
            "text": "", 
            "title": "2016-07-28"
        }, 
        {
            "location": "/release-notes/#updated-features_18", 
            "text": "Improved transcoding support for interlaced originals.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-07-26", 
            "text": "", 
            "title": "2016-07-26"
        }, 
        {
            "location": "/release-notes/#updated-features_19", 
            "text": "The production channel of cloud hosted players now uses JW Player 7.5. This adds DRM compatibility for two additional browsers (Firefox and Safari Desktop) as well as improvements to captions positioning, handling, and styling. Aria integration improves accessibility by adding support for screen readers. Finally, we've exposed additional tracking information via our API, and made VMAP ad scheduling more robust. Full release notes are available  here .", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-07-25", 
            "text": "", 
            "title": "2016-07-25"
        }, 
        {
            "location": "/release-notes/#updated-features_20", 
            "text": "Updated opengraph url tag to use the same player key as the iframe player including it.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#bug-fixes_5", 
            "text": "Fixed issue in accessing tracks that were uploaded without an extension.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/#2016-07-20", 
            "text": "", 
            "title": "2016-07-20"
        }, 
        {
            "location": "/release-notes/#bug-fixes_6", 
            "text": "Data driven feeds properly support OPTIONS requests with CORS headers.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/#2016-07-18", 
            "text": "", 
            "title": "2016-07-18"
        }, 
        {
            "location": "/release-notes/#new-features_15", 
            "text": "The JW Platform Dashboard now offers new roles for read-only users and content editors more information is available on our  blog post .", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2016-07-05", 
            "text": "", 
            "title": "2016-07-05"
        }, 
        {
            "location": "/release-notes/#new-features_16", 
            "text": "We are pleased to offer a new Platinum Edition of JW Player that includes a basic allotment of advertising impressions and increased hosting and streaming limits over the Premium Edition. Get started  here .", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2016-06-30", 
            "text": "", 
            "title": "2016-06-30"
        }, 
        {
            "location": "/release-notes/#updated-features_21", 
            "text": "All content now has a 1920px wide poster image available. It is accessible in the  same way  as other poster images.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-06-14", 
            "text": "", 
            "title": "2016-06-14"
        }, 
        {
            "location": "/release-notes/#new-features_17", 
            "text": "Data-driven similar and trending feeds now support content signing using JSON Web Tokens. More details are available  here .", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2016-06-06", 
            "text": "", 
            "title": "2016-06-06"
        }, 
        {
            "location": "/release-notes/#updated-features_22", 
            "text": "Single line player embeds can now use a trending feed_id as a key to include trending content directly in a player as a playlist.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-05-31", 
            "text": "", 
            "title": "2016-05-31"
        }, 
        {
            "location": "/release-notes/#new-features_18", 
            "text": "Data-driven similar and trending feeds are now available in json format. More details are available  here .", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2016-05-23", 
            "text": "", 
            "title": "2016-05-23"
        }, 
        {
            "location": "/release-notes/#new-features_19", 
            "text": "Enterprise Edition accounts can now configure and serve advertising schedules.  Added API rate limiting information to API responses.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#updated-features_23", 
            "text": "The no-index metatag has been removed from iframe players to improve search engine indexing.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#bug-fixes_7", 
            "text": "Fix ensures that deleted ad tags not served even if an ad break is configured to use them.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/#2016-05-10", 
            "text": "", 
            "title": "2016-05-10"
        }, 
        {
            "location": "/release-notes/#updated-features_24", 
            "text": "It is possible to create  sourcetype: url  videos with  sourceformat: mpd  allowing externally hosted DASH manifests to be served with JW Player single line embeds.   Adjusted cache control headers on the content service to allow an individual browser to use the same download for longer, this should reduce delivery costs on looping videos.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#bug-fixes_8", 
            "text": "We removed the spaces (now there are only commas) between tags in JW7 single line embeds and json feeds. This allows for using the  __item-tags__  macro directly with DFP for Google IMA Ad Tags.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/#2016-05-04", 
            "text": "", 
            "title": "2016-05-04"
        }, 
        {
            "location": "/release-notes/#new-features_20", 
            "text": "Dashboard uploads now take advantage of S3 Accelerated Transfer.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#2016-04-26", 
            "text": "", 
            "title": "2016-04-26"
        }, 
        {
            "location": "/release-notes/#new-features_21", 
            "text": "Trending type feeds are now supported in JW Platform single line embeds.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#updated-features_25", 
            "text": "JW Player 7.4.0 was released to the staging channel. Full release notes are available  here . Of particular interest to platform embeds, the new version includes:  Support for HLS in HTML5. Cloud hosted players can take advantage of this by setting  \"primary\":\"html5\"  or omitting the  primary  property of the player.  Updated support for VP9-DASH to check for VP9 support in the browser before chosing the DASH source. This allows browers like Edge to fall back to HLS until they support VP9 rendering.  Google IMA ad tags will automatically get duration and video title added to the request url for more enhanced ad targeting.    JSON feeds  now include VP9-DASH sources and restructured custom parameters to align with the behavior of single line embeds.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#bug-fixes_9", 
            "text": "Vertical video with a non-zero rotation parameter served by JW Platform now renders properly in all devices without stretching.  Cloud hosted related plugins support zero second autoplay countdown to allow the player to immediately proceed into the first related video upon completion.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/#2016-04-18", 
            "text": "", 
            "title": "2016-04-18"
        }, 
        {
            "location": "/release-notes/#new-features_22", 
            "text": "Trending Playlists and Similar Video Feeds  BETA Preview . With a special account entitlement, JW Platform now supports two new varieties of Data-Driven Recommendations access. Trending Playlists are dynamically generated based on recently trending videos. Similar Video Feeds allow are dynamically populated with media having similar content metadata. The new functionality is configurable through the  /channels  API endpoint and is served through a new  /feed.rss  content service endpoint.  Video Sunset. Videos can be configured to expire at a predetermined date and time. After their  expires_date , videos will no longer show up in playlists and subsequent requests for videos will not be allowed. The  expires_date  can be specified in the  dashboard  or through the API during  creation  or as an  update  to a video.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#updated-features_26", 
            "text": "Dashboard redesign. The JW Player Dashboard has been updated to simplify and give quick access to popular features through an updated left navigation panel and redesigned account section.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-03-31", 
            "text": "", 
            "title": "2016-03-31"
        }, 
        {
            "location": "/release-notes/#new-features_23", 
            "text": "Support for VP9 transcoding and adaptive streaming of VP9 conversions using DASH. This feature requires a separate account entitlement and is only open to users in a limited pilot at this time.", 
            "title": "New Features"
        }, 
        {
            "location": "/release-notes/#updated-features_27", 
            "text": "JW7 single-line embed performance enhancement. Embeds of JW Player version 7 now include media links. This means faster player setup and time to first frame. It also means that free edition player will be able to take advantage of the various quality transcodes created by JW Platform.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#bug-fixes_10", 
            "text": "Custom skins with JW7. This release allows the inclusion of the skin name with custom css skins for JW7 players. Using custom skins for JW7 requires matching the skin name with the jw-skin-  string in the css.  Fixed an issue with URL tokenization where iframe single-line embeds that were correctly signed were failing signature validation.", 
            "title": "Bug Fixes"
        }, 
        {
            "location": "/release-notes/#2016-03-21", 
            "text": "", 
            "title": "2016-03-21"
        }, 
        {
            "location": "/release-notes/#updated-features_28", 
            "text": "Updated JW7 iframe embeds to listen for play and pause events on the iframe and pass them to the contained player.", 
            "title": "Updated Features"
        }, 
        {
            "location": "/release-notes/#2016-03-03-upload-to-s3", 
            "text": "", 
            "title": "2016-03-03 Upload to s3"
        }, 
        {
            "location": "/release-notes/#new-features_24", 
            "text": "Upload videos directly to the cloud!  JW Platform now supports video uploads (up to 5GB) directly to s3. s3 uploads take advantage of global cloud infrastructure including edge services to achieve the fastest and most reliable uploads globally. Details available  here .", 
            "title": "New Features"
        }
    ]
}